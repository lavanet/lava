// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/rpcprovider/provider_listener.go
//
// Generated by this command:
//
//	mockgen -source=protocol/rpcprovider/provider_listener.go -destination protocol/rpcprovider/provider_listener_mock.go -package rpcprovider
//
// Package rpcprovider is a generated GoMock package.
package rpcprovider

import (
	context "context"
	reflect "reflect"

	types "github.com/lavanet/lava/v3/x/pairing/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRelayReceiver is a mock of RelayReceiver interface.
type MockRelayReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockRelayReceiverMockRecorder
}

// MockRelayReceiverMockRecorder is the mock recorder for MockRelayReceiver.
type MockRelayReceiverMockRecorder struct {
	mock *MockRelayReceiver
}

// NewMockRelayReceiver creates a new mock instance.
func NewMockRelayReceiver(ctrl *gomock.Controller) *MockRelayReceiver {
	mock := &MockRelayReceiver{ctrl: ctrl}
	mock.recorder = &MockRelayReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayReceiver) EXPECT() *MockRelayReceiverMockRecorder {
	return m.recorder
}

// Probe mocks base method.
func (m *MockRelayReceiver) Probe(ctx context.Context, probeReq *types.ProbeRequest) (*types.ProbeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", ctx, probeReq)
	ret0, _ := ret[0].(*types.ProbeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockRelayReceiverMockRecorder) Probe(ctx, probeReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockRelayReceiver)(nil).Probe), ctx, probeReq)
}

// Relay mocks base method.
func (m *MockRelayReceiver) Relay(ctx context.Context, request *types.RelayRequest) (*types.RelayReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relay", ctx, request)
	ret0, _ := ret[0].(*types.RelayReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relay indicates an expected call of Relay.
func (mr *MockRelayReceiverMockRecorder) Relay(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relay", reflect.TypeOf((*MockRelayReceiver)(nil).Relay), ctx, request)
}

// RelaySubscribe mocks base method.
func (m *MockRelayReceiver) RelaySubscribe(request *types.RelayRequest, srv types.Relayer_RelaySubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelaySubscribe", request, srv)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelaySubscribe indicates an expected call of RelaySubscribe.
func (mr *MockRelayReceiverMockRecorder) RelaySubscribe(request, srv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaySubscribe", reflect.TypeOf((*MockRelayReceiver)(nil).RelaySubscribe), request, srv)
}
