// Code generated by MockGen. DO NOT EDIT.
// Source: ./protocol/statetracker/updaters/provider_freeze_updater.go

// Package mock_updaters is a generated GoMock package.
package updaters

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/lavanet/lava/v3/x/pairing/types"
	grpc "google.golang.org/grpc"
)

// MockProviderPairingStatusStateQueryInf is a mock of ProviderPairingStatusStateQueryInf interface.
type MockProviderPairingStatusStateQueryInf struct {
	ctrl     *gomock.Controller
	recorder *MockProviderPairingStatusStateQueryInfMockRecorder
}

// MockProviderPairingStatusStateQueryInfMockRecorder is the mock recorder for MockProviderPairingStatusStateQueryInf.
type MockProviderPairingStatusStateQueryInfMockRecorder struct {
	mock *MockProviderPairingStatusStateQueryInf
}

// NewMockProviderPairingStatusStateQueryInf creates a new mock instance.
func NewMockProviderPairingStatusStateQueryInf(ctrl *gomock.Controller) *MockProviderPairingStatusStateQueryInf {
	mock := &MockProviderPairingStatusStateQueryInf{ctrl: ctrl}
	mock.recorder = &MockProviderPairingStatusStateQueryInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderPairingStatusStateQueryInf) EXPECT() *MockProviderPairingStatusStateQueryInfMockRecorder {
	return m.recorder
}

// Provider mocks base method.
func (m *MockProviderPairingStatusStateQueryInf) Provider(ctx context.Context, in *types.QueryProviderRequest, opts ...grpc.CallOption) (*types.QueryProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Provider", varargs...)
	ret0, _ := ret[0].(*types.QueryProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provider indicates an expected call of Provider.
func (mr *MockProviderPairingStatusStateQueryInfMockRecorder) Provider(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockProviderPairingStatusStateQueryInf)(nil).Provider), varargs...)
}

// MockProviderMetricsManagerInf is a mock of ProviderMetricsManagerInf interface.
type MockProviderMetricsManagerInf struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMetricsManagerInfMockRecorder
}

// MockProviderMetricsManagerInfMockRecorder is the mock recorder for MockProviderMetricsManagerInf.
type MockProviderMetricsManagerInfMockRecorder struct {
	mock *MockProviderMetricsManagerInf
}

// NewMockProviderMetricsManagerInf creates a new mock instance.
func NewMockProviderMetricsManagerInf(ctrl *gomock.Controller) *MockProviderMetricsManagerInf {
	mock := &MockProviderMetricsManagerInf{ctrl: ctrl}
	mock.recorder = &MockProviderMetricsManagerInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderMetricsManagerInf) EXPECT() *MockProviderMetricsManagerInfMockRecorder {
	return m.recorder
}

// SetFrozenStatus mocks base method.
func (m *MockProviderMetricsManagerInf) SetFrozenStatus(arg0 float64, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFrozenStatus", arg0, arg1, arg2)
}

// SetFrozenStatus indicates an expected call of SetFrozenStatus.
func (mr *MockProviderMetricsManagerInfMockRecorder) SetFrozenStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFrozenStatus", reflect.TypeOf((*MockProviderMetricsManagerInf)(nil).SetFrozenStatus), arg0, arg1, arg2)
}

// SetJailedStatus mocks base method.
func (m *MockProviderMetricsManagerInf) SetJailedStatus(arg0 uint64, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJailedStatus", arg0, arg1, arg2)
}

// SetJailedStatus indicates an expected call of SetJailedStatus.
func (mr *MockProviderMetricsManagerInfMockRecorder) SetJailedStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJailedStatus", reflect.TypeOf((*MockProviderMetricsManagerInf)(nil).SetJailedStatus), arg0, arg1, arg2)
}
