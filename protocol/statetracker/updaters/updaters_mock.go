// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/statetracker/updaters/pairing_updater.go

// Package updaters is a generated GoMock package.
package updaters

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lavasession "github.com/lavanet/lava/v3/protocol/lavasession"
	types "github.com/lavanet/lava/v3/x/epochstorage/types"
	context "golang.org/x/net/context"
)

// MockPairingUpdatable is a mock of PairingUpdatable interface.
type MockPairingUpdatable struct {
	ctrl     *gomock.Controller
	recorder *MockPairingUpdatableMockRecorder
}

// MockPairingUpdatableMockRecorder is the mock recorder for MockPairingUpdatable.
type MockPairingUpdatableMockRecorder struct {
	mock *MockPairingUpdatable
}

// NewMockPairingUpdatable creates a new mock instance.
func NewMockPairingUpdatable(ctrl *gomock.Controller) *MockPairingUpdatable {
	mock := &MockPairingUpdatable{ctrl: ctrl}
	mock.recorder = &MockPairingUpdatableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPairingUpdatable) EXPECT() *MockPairingUpdatableMockRecorder {
	return m.recorder
}

// UpdateEpoch mocks base method.
func (m *MockPairingUpdatable) UpdateEpoch(epoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateEpoch", epoch)
}

// UpdateEpoch indicates an expected call of UpdateEpoch.
func (mr *MockPairingUpdatableMockRecorder) UpdateEpoch(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpoch", reflect.TypeOf((*MockPairingUpdatable)(nil).UpdateEpoch), epoch)
}

// MockConsumerStateQueryInf is a mock of ConsumerStateQueryInf interface.
type MockConsumerStateQueryInf struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerStateQueryInfMockRecorder
}

// MockConsumerStateQueryInfMockRecorder is the mock recorder for MockConsumerStateQueryInf.
type MockConsumerStateQueryInfMockRecorder struct {
	mock *MockConsumerStateQueryInf
}

// NewMockConsumerStateQueryInf creates a new mock instance.
func NewMockConsumerStateQueryInf(ctrl *gomock.Controller) *MockConsumerStateQueryInf {
	mock := &MockConsumerStateQueryInf{ctrl: ctrl}
	mock.recorder = &MockConsumerStateQueryInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerStateQueryInf) EXPECT() *MockConsumerStateQueryInfMockRecorder {
	return m.recorder
}

// GetMaxCUForUser mocks base method.
func (m *MockConsumerStateQueryInf) GetMaxCUForUser(ctx context.Context, chainID string, epoch uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxCUForUser", ctx, chainID, epoch)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxCUForUser indicates an expected call of GetMaxCUForUser.
func (mr *MockConsumerStateQueryInfMockRecorder) GetMaxCUForUser(ctx, chainID, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxCUForUser", reflect.TypeOf((*MockConsumerStateQueryInf)(nil).GetMaxCUForUser), ctx, chainID, epoch)
}

// GetPairing mocks base method.
func (m *MockConsumerStateQueryInf) GetPairing(ctx context.Context, chainID string, blockHeight int64) ([]types.StakeEntry, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairing", ctx, chainID, blockHeight)
	ret0, _ := ret[0].([]types.StakeEntry)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPairing indicates an expected call of GetPairing.
func (mr *MockConsumerStateQueryInfMockRecorder) GetPairing(ctx, chainID, blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairing", reflect.TypeOf((*MockConsumerStateQueryInf)(nil).GetPairing), ctx, chainID, blockHeight)
}

// MockConsumerSessionManagerInf is a mock of ConsumerSessionManagerInf interface.
type MockConsumerSessionManagerInf struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerSessionManagerInfMockRecorder
}

// MockConsumerSessionManagerInfMockRecorder is the mock recorder for MockConsumerSessionManagerInf.
type MockConsumerSessionManagerInfMockRecorder struct {
	mock *MockConsumerSessionManagerInf
}

// NewMockConsumerSessionManagerInf creates a new mock instance.
func NewMockConsumerSessionManagerInf(ctrl *gomock.Controller) *MockConsumerSessionManagerInf {
	mock := &MockConsumerSessionManagerInf{ctrl: ctrl}
	mock.recorder = &MockConsumerSessionManagerInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerSessionManagerInf) EXPECT() *MockConsumerSessionManagerInfMockRecorder {
	return m.recorder
}

// RPCEndpoint mocks base method.
func (m *MockConsumerSessionManagerInf) RPCEndpoint() lavasession.RPCEndpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCEndpoint")
	ret0, _ := ret[0].(lavasession.RPCEndpoint)
	return ret0
}

// RPCEndpoint indicates an expected call of RPCEndpoint.
func (mr *MockConsumerSessionManagerInfMockRecorder) RPCEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCEndpoint", reflect.TypeOf((*MockConsumerSessionManagerInf)(nil).RPCEndpoint))
}

// UpdateAllProviders mocks base method.
func (m *MockConsumerSessionManagerInf) UpdateAllProviders(epoch uint64, pairingList map[uint64]*lavasession.ConsumerSessionsWithProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllProviders", epoch, pairingList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllProviders indicates an expected call of UpdateAllProviders.
func (mr *MockConsumerSessionManagerInfMockRecorder) UpdateAllProviders(epoch, pairingList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllProviders", reflect.TypeOf((*MockConsumerSessionManagerInf)(nil).UpdateAllProviders), epoch, pairingList)
}
