// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/statetracker/updaters/provider_freeze_updater.go
//
// Generated by this command:
//
//	mockgen -source=protocol/statetracker/updaters/provider_freeze_updater.go -destination protocol/statetracker/updaters/provider_freeze_updater_mocks.go -package updaters
//

// Package updaters is a generated GoMock package.
package updaters

import (
	context "context"
	reflect "reflect"

	types "github.com/lavanet/lava/v4/x/pairing/types"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProviderPairingStatusStateQueryInf is a mock of ProviderPairingStatusStateQueryInf interface.
type MockProviderPairingStatusStateQueryInf struct {
	ctrl     *gomock.Controller
	recorder *MockProviderPairingStatusStateQueryInfMockRecorder
}

// MockProviderPairingStatusStateQueryInfMockRecorder is the mock recorder for MockProviderPairingStatusStateQueryInf.
type MockProviderPairingStatusStateQueryInfMockRecorder struct {
	mock *MockProviderPairingStatusStateQueryInf
}

// NewMockProviderPairingStatusStateQueryInf creates a new mock instance.
func NewMockProviderPairingStatusStateQueryInf(ctrl *gomock.Controller) *MockProviderPairingStatusStateQueryInf {
	mock := &MockProviderPairingStatusStateQueryInf{ctrl: ctrl}
	mock.recorder = &MockProviderPairingStatusStateQueryInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderPairingStatusStateQueryInf) EXPECT() *MockProviderPairingStatusStateQueryInfMockRecorder {
	return m.recorder
}

// Provider mocks base method.
func (m *MockProviderPairingStatusStateQueryInf) Provider(ctx context.Context, in *types.QueryProviderRequest, opts ...grpc.CallOption) (*types.QueryProviderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Provider", varargs...)
	ret0, _ := ret[0].(*types.QueryProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provider indicates an expected call of Provider.
func (mr *MockProviderPairingStatusStateQueryInfMockRecorder) Provider(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockProviderPairingStatusStateQueryInf)(nil).Provider), varargs...)
}

// MockProviderMetricsManagerInf is a mock of ProviderMetricsManagerInf interface.
type MockProviderMetricsManagerInf struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMetricsManagerInfMockRecorder
}

// MockProviderMetricsManagerInfMockRecorder is the mock recorder for MockProviderMetricsManagerInf.
type MockProviderMetricsManagerInfMockRecorder struct {
	mock *MockProviderMetricsManagerInf
}

// NewMockProviderMetricsManagerInf creates a new mock instance.
func NewMockProviderMetricsManagerInf(ctrl *gomock.Controller) *MockProviderMetricsManagerInf {
	mock := &MockProviderMetricsManagerInf{ctrl: ctrl}
	mock.recorder = &MockProviderMetricsManagerInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderMetricsManagerInf) EXPECT() *MockProviderMetricsManagerInfMockRecorder {
	return m.recorder
}

// SetFrozenStatus mocks base method.
func (m *MockProviderMetricsManagerInf) SetFrozenStatus(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFrozenStatus", arg0, arg1)
}

// SetFrozenStatus indicates an expected call of SetFrozenStatus.
func (mr *MockProviderMetricsManagerInfMockRecorder) SetFrozenStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFrozenStatus", reflect.TypeOf((*MockProviderMetricsManagerInf)(nil).SetFrozenStatus), arg0, arg1)
}

// SetJailStatus mocks base method.
func (m *MockProviderMetricsManagerInf) SetJailStatus(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJailStatus", arg0, arg1)
}

// SetJailStatus indicates an expected call of SetJailStatus.
func (mr *MockProviderMetricsManagerInfMockRecorder) SetJailStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJailStatus", reflect.TypeOf((*MockProviderMetricsManagerInf)(nil).SetJailStatus), arg0, arg1)
}

// SetJailedCount mocks base method.
func (m *MockProviderMetricsManagerInf) SetJailedCount(arg0 string, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJailedCount", arg0, arg1)
}

// SetJailedCount indicates an expected call of SetJailedCount.
func (mr *MockProviderMetricsManagerInfMockRecorder) SetJailedCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJailedCount", reflect.TypeOf((*MockProviderMetricsManagerInf)(nil).SetJailedCount), arg0, arg1)
}
