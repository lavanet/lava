// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/epochstorage/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStakeStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStakeStorageRequest) Reset()         { *m = QueryGetStakeStorageRequest{} }
func (m *QueryGetStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeStorageRequest) ProtoMessage()    {}
func (*QueryGetStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{2}
}
func (m *QueryGetStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeStorageRequest.Merge(m, src)
}
func (m *QueryGetStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeStorageRequest proto.InternalMessageInfo

func (m *QueryGetStakeStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStakeStorageResponse struct {
	StakeStorage StakeStorage `protobuf:"bytes,1,opt,name=stakeStorage,proto3" json:"stakeStorage"`
}

func (m *QueryGetStakeStorageResponse) Reset()         { *m = QueryGetStakeStorageResponse{} }
func (m *QueryGetStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeStorageResponse) ProtoMessage()    {}
func (*QueryGetStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{3}
}
func (m *QueryGetStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeStorageResponse.Merge(m, src)
}
func (m *QueryGetStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeStorageResponse proto.InternalMessageInfo

func (m *QueryGetStakeStorageResponse) GetStakeStorage() StakeStorage {
	if m != nil {
		return m.StakeStorage
	}
	return StakeStorage{}
}

type QueryAllStakeStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakeStorageRequest) Reset()         { *m = QueryAllStakeStorageRequest{} }
func (m *QueryAllStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeStorageRequest) ProtoMessage()    {}
func (*QueryAllStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{4}
}
func (m *QueryAllStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeStorageRequest.Merge(m, src)
}
func (m *QueryAllStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeStorageRequest proto.InternalMessageInfo

func (m *QueryAllStakeStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakeStorageResponse struct {
	StakeStorage []StakeStorage      `protobuf:"bytes,1,rep,name=stakeStorage,proto3" json:"stakeStorage"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakeStorageResponse) Reset()         { *m = QueryAllStakeStorageResponse{} }
func (m *QueryAllStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeStorageResponse) ProtoMessage()    {}
func (*QueryAllStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{5}
}
func (m *QueryAllStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeStorageResponse.Merge(m, src)
}
func (m *QueryAllStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeStorageResponse proto.InternalMessageInfo

func (m *QueryAllStakeStorageResponse) GetStakeStorage() []StakeStorage {
	if m != nil {
		return m.StakeStorage
	}
	return nil
}

func (m *QueryAllStakeStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEpochDetailsRequest struct {
}

func (m *QueryGetEpochDetailsRequest) Reset()         { *m = QueryGetEpochDetailsRequest{} }
func (m *QueryGetEpochDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochDetailsRequest) ProtoMessage()    {}
func (*QueryGetEpochDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{6}
}
func (m *QueryGetEpochDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochDetailsRequest.Merge(m, src)
}
func (m *QueryGetEpochDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochDetailsRequest proto.InternalMessageInfo

type QueryGetEpochDetailsResponse struct {
	EpochDetails EpochDetails `protobuf:"bytes,1,opt,name=EpochDetails,proto3" json:"EpochDetails"`
}

func (m *QueryGetEpochDetailsResponse) Reset()         { *m = QueryGetEpochDetailsResponse{} }
func (m *QueryGetEpochDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochDetailsResponse) ProtoMessage()    {}
func (*QueryGetEpochDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{7}
}
func (m *QueryGetEpochDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochDetailsResponse.Merge(m, src)
}
func (m *QueryGetEpochDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochDetailsResponse proto.InternalMessageInfo

func (m *QueryGetEpochDetailsResponse) GetEpochDetails() EpochDetails {
	if m != nil {
		return m.EpochDetails
	}
	return EpochDetails{}
}

type QueryGetFixatedParamsRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetFixatedParamsRequest) Reset()         { *m = QueryGetFixatedParamsRequest{} }
func (m *QueryGetFixatedParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFixatedParamsRequest) ProtoMessage()    {}
func (*QueryGetFixatedParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{8}
}
func (m *QueryGetFixatedParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFixatedParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFixatedParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFixatedParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFixatedParamsRequest.Merge(m, src)
}
func (m *QueryGetFixatedParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFixatedParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFixatedParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFixatedParamsRequest proto.InternalMessageInfo

func (m *QueryGetFixatedParamsRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetFixatedParamsResponse struct {
	FixatedParams FixatedParams `protobuf:"bytes,1,opt,name=fixatedParams,proto3" json:"fixatedParams"`
}

func (m *QueryGetFixatedParamsResponse) Reset()         { *m = QueryGetFixatedParamsResponse{} }
func (m *QueryGetFixatedParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFixatedParamsResponse) ProtoMessage()    {}
func (*QueryGetFixatedParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{9}
}
func (m *QueryGetFixatedParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFixatedParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFixatedParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFixatedParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFixatedParamsResponse.Merge(m, src)
}
func (m *QueryGetFixatedParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFixatedParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFixatedParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFixatedParamsResponse proto.InternalMessageInfo

func (m *QueryGetFixatedParamsResponse) GetFixatedParams() FixatedParams {
	if m != nil {
		return m.FixatedParams
	}
	return FixatedParams{}
}

type QueryAllFixatedParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFixatedParamsRequest) Reset()         { *m = QueryAllFixatedParamsRequest{} }
func (m *QueryAllFixatedParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFixatedParamsRequest) ProtoMessage()    {}
func (*QueryAllFixatedParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{10}
}
func (m *QueryAllFixatedParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFixatedParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFixatedParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFixatedParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFixatedParamsRequest.Merge(m, src)
}
func (m *QueryAllFixatedParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFixatedParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFixatedParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFixatedParamsRequest proto.InternalMessageInfo

func (m *QueryAllFixatedParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFixatedParamsResponse struct {
	FixatedParams []FixatedParams     `protobuf:"bytes,1,rep,name=fixatedParams,proto3" json:"fixatedParams"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFixatedParamsResponse) Reset()         { *m = QueryAllFixatedParamsResponse{} }
func (m *QueryAllFixatedParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFixatedParamsResponse) ProtoMessage()    {}
func (*QueryAllFixatedParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60112e15fc266719, []int{11}
}
func (m *QueryAllFixatedParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFixatedParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFixatedParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFixatedParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFixatedParamsResponse.Merge(m, src)
}
func (m *QueryAllFixatedParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFixatedParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFixatedParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFixatedParamsResponse proto.InternalMessageInfo

func (m *QueryAllFixatedParamsResponse) GetFixatedParams() []FixatedParams {
	if m != nil {
		return m.FixatedParams
	}
	return nil
}

func (m *QueryAllFixatedParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.epochstorage.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.epochstorage.QueryParamsResponse")
	proto.RegisterType((*QueryGetStakeStorageRequest)(nil), "lavanet.lava.epochstorage.QueryGetStakeStorageRequest")
	proto.RegisterType((*QueryGetStakeStorageResponse)(nil), "lavanet.lava.epochstorage.QueryGetStakeStorageResponse")
	proto.RegisterType((*QueryAllStakeStorageRequest)(nil), "lavanet.lava.epochstorage.QueryAllStakeStorageRequest")
	proto.RegisterType((*QueryAllStakeStorageResponse)(nil), "lavanet.lava.epochstorage.QueryAllStakeStorageResponse")
	proto.RegisterType((*QueryGetEpochDetailsRequest)(nil), "lavanet.lava.epochstorage.QueryGetEpochDetailsRequest")
	proto.RegisterType((*QueryGetEpochDetailsResponse)(nil), "lavanet.lava.epochstorage.QueryGetEpochDetailsResponse")
	proto.RegisterType((*QueryGetFixatedParamsRequest)(nil), "lavanet.lava.epochstorage.QueryGetFixatedParamsRequest")
	proto.RegisterType((*QueryGetFixatedParamsResponse)(nil), "lavanet.lava.epochstorage.QueryGetFixatedParamsResponse")
	proto.RegisterType((*QueryAllFixatedParamsRequest)(nil), "lavanet.lava.epochstorage.QueryAllFixatedParamsRequest")
	proto.RegisterType((*QueryAllFixatedParamsResponse)(nil), "lavanet.lava.epochstorage.QueryAllFixatedParamsResponse")
}

func init() {
	proto.RegisterFile("lavanet/lava/epochstorage/query.proto", fileDescriptor_60112e15fc266719)
}

var fileDescriptor_60112e15fc266719 = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x40, 0x88, 0x8e, 0x10, 0xcd, 0xc8, 0x41, 0x57, 0xa8, 0x52, 0x23, 0x02, 0x86,
	0x19, 0x96, 0x35, 0x8a, 0x27, 0x03, 0x51, 0x88, 0x37, 0x58, 0x8c, 0x07, 0x2f, 0x64, 0x76, 0x19,
	0x4a, 0x63, 0xe9, 0x94, 0xed, 0x2c, 0x81, 0x18, 0x2f, 0x7e, 0x02, 0xa3, 0x9f, 0xc4, 0xc4, 0x83,
	0x9a, 0xc8, 0x99, 0x23, 0x89, 0x17, 0x4f, 0xc6, 0x80, 0x1f, 0xc4, 0x74, 0x66, 0xd6, 0xce, 0x84,
	0x96, 0x16, 0xe1, 0xb4, 0xdb, 0xe9, 0x7b, 0xff, 0xf7, 0xfb, 0xcf, 0xbc, 0xbe, 0x16, 0xde, 0x0d,
	0xe8, 0x36, 0x0d, 0x99, 0x20, 0xc9, 0x2f, 0x61, 0x11, 0x6f, 0x6d, 0xc4, 0x82, 0xb7, 0xa9, 0xc7,
	0xc8, 0x56, 0x87, 0xb5, 0x77, 0x71, 0xd4, 0xe6, 0x82, 0xa3, 0x1b, 0x3a, 0x0c, 0x27, 0xbf, 0xd8,
	0x0c, 0xab, 0x0e, 0x7b, 0x9c, 0x7b, 0x01, 0x23, 0x34, 0xf2, 0x09, 0x0d, 0x43, 0x2e, 0xa8, 0xf0,
	0x79, 0x18, 0xab, 0xc4, 0xea, 0x64, 0x8b, 0xc7, 0x9b, 0x3c, 0x26, 0x4d, 0x1a, 0x6b, 0x45, 0xb2,
	0x5d, 0x6b, 0x32, 0x41, 0x6b, 0x24, 0xa2, 0x9e, 0x1f, 0xca, 0x60, 0x1d, 0x3b, 0x96, 0xcf, 0x12,
	0xd1, 0x36, 0xdd, 0xec, 0x6a, 0x4e, 0xe5, 0xc7, 0xc5, 0x82, 0xbe, 0x66, 0xab, 0xfa, 0xaa, 0x38,
	0x5c, 0x5e, 0xac, 0xae, 0x31, 0x41, 0xfd, 0xa0, 0xab, 0x8e, 0xf3, 0xc3, 0xd7, 0xfd, 0x1d, 0x2a,
	0xd8, 0xda, 0xaa, 0x45, 0xe3, 0x98, 0x0e, 0xbb, 0xde, 0x5a, 0xdc, 0xef, 0xba, 0x1a, 0xf2, 0xb8,
	0xc7, 0xe5, 0x5f, 0x92, 0xfc, 0x53, 0xab, 0xee, 0x10, 0x44, 0xcb, 0xc9, 0x6e, 0x2c, 0x49, 0xa9,
	0x06, 0xdb, 0xea, 0xb0, 0x58, 0xb8, 0x2f, 0xe1, 0x35, 0x6b, 0x35, 0x8e, 0x78, 0x18, 0x33, 0xf4,
	0x04, 0xf6, 0xab, 0x92, 0xd7, 0xc1, 0x6d, 0x30, 0x7e, 0x79, 0x66, 0x14, 0xe7, 0x1e, 0x07, 0x56,
	0xa9, 0xf3, 0x17, 0xf6, 0x7f, 0xdd, 0xaa, 0x34, 0x74, 0x9a, 0x5b, 0x87, 0x37, 0xa5, 0xee, 0x22,
	0x13, 0x2b, 0xc9, 0x0e, 0xad, 0xa8, 0x60, 0x5d, 0x16, 0x0d, 0xc1, 0x3e, 0x3f, 0x5c, 0x63, 0x3b,
	0x52, 0xfe, 0x52, 0x43, 0x5d, 0xb8, 0x5b, 0x70, 0x38, 0x3b, 0x49, 0x53, 0x2d, 0xc3, 0x81, 0xd8,
	0x58, 0xd7, 0x6c, 0xf7, 0x4e, 0x60, 0x33, 0x65, 0x34, 0xa1, 0x25, 0xe1, 0x32, 0xcd, 0x39, 0x17,
	0x04, 0x59, 0x9c, 0x0b, 0x10, 0xa6, 0x4d, 0xa3, 0xeb, 0x8d, 0x61, 0xb5, 0xff, 0x38, 0xd9, 0x7f,
	0xac, 0x7a, 0x56, 0x9f, 0x02, 0x5e, 0x4a, 0x73, 0x1b, 0x46, 0xa6, 0xfb, 0x0d, 0x68, 0x6b, 0xc7,
	0xea, 0xe4, 0x5a, 0xeb, 0x3d, 0xa3, 0x35, 0xb4, 0x68, 0xb1, 0xf7, 0xe8, 0xbd, 0x2a, 0x62, 0x57,
	0x3c, 0x16, 0xfc, 0x48, 0x7a, 0x96, 0xcf, 0x12, 0x82, 0xa7, 0xaa, 0x7b, 0xbb, 0x2d, 0x64, 0x9c,
	0x9a, 0x7d, 0x3b, 0xb5, 0x66, 0xae, 0x97, 0x38, 0x35, 0x33, 0xbc, 0x6b, 0xcd, 0x5c, 0x73, 0x1f,
	0xa4, 0x25, 0x17, 0xd4, 0x13, 0x62, 0x75, 0x75, 0x4e, 0x7b, 0x75, 0xe0, 0x48, 0x4e, 0x96, 0x26,
	0x7d, 0x01, 0x07, 0xd7, 0xcd, 0x1b, 0x1a, 0x75, 0xfc, 0x04, 0x54, 0x4b, 0x48, 0xb3, 0xda, 0x22,
	0xee, 0x7a, 0x7a, 0xf4, 0x99, 0xb0, 0xe7, 0xd5, 0x63, 0x7b, 0x40, 0xfb, 0x3b, 0x5e, 0x28, 0xdf,
	0x5f, 0xef, 0x99, 0xfd, 0x9d, 0x5b, 0x9f, 0xcd, 0xec, 0x5d, 0x84, 0x7d, 0xd2, 0x00, 0xfa, 0x00,
	0x60, 0xbf, 0x56, 0x9f, 0x3a, 0x01, 0xee, 0xf8, 0x3c, 0xab, 0xe2, 0xb2, 0xe1, 0xaa, 0xbe, 0x3b,
	0xf1, 0xee, 0xc7, 0x9f, 0x8f, 0x3d, 0x77, 0xd0, 0x28, 0x29, 0x7a, 0x15, 0xa0, 0xaf, 0x00, 0x0e,
	0x98, 0x0f, 0x1d, 0x7a, 0x58, 0x54, 0x2b, 0x7b, 0xf8, 0x55, 0x1f, 0x9d, 0x3a, 0x4f, 0xc3, 0xce,
	0x4a, 0xd8, 0x19, 0x34, 0x4d, 0x4a, 0xbe, 0x8f, 0xc8, 0x1b, 0xd9, 0xf9, 0x6f, 0xd1, 0x67, 0x00,
	0xaf, 0x98, 0x92, 0x73, 0x41, 0x50, 0x8c, 0x9f, 0x3d, 0x13, 0x8b, 0xf1, 0x73, 0x66, 0x9c, 0x3b,
	0x2d, 0xf1, 0x27, 0xd1, 0x78, 0x59, 0x7c, 0xf4, 0x09, 0xd8, 0xb3, 0xa3, 0xd4, 0x96, 0x67, 0xcc,
	0xa8, 0x52, 0x5b, 0x9e, 0x35, 0xbc, 0x4a, 0x31, 0x5b, 0xef, 0x74, 0xf4, 0x1d, 0xc0, 0x41, 0xeb,
	0xa9, 0x41, 0x65, 0x8a, 0x67, 0x4d, 0x86, 0xea, 0xec, 0xe9, 0x13, 0x35, 0xf6, 0x63, 0x89, 0x5d,
	0x47, 0x35, 0x52, 0xf6, 0xdb, 0xe2, 0x5f, 0xab, 0x7c, 0x01, 0xf0, 0xaa, 0x25, 0x9a, 0xf4, 0x4a,
	0x99, 0x33, 0xff, 0x3f, 0x0b, 0x79, 0xc3, 0xca, 0xad, 0x49, 0x0b, 0xf7, 0xd1, 0x44, 0x69, 0x0b,
	0xf3, 0xcf, 0xf7, 0x0f, 0x1d, 0x70, 0x70, 0xe8, 0x80, 0xdf, 0x87, 0x0e, 0x78, 0x7f, 0xe4, 0x54,
	0x0e, 0x8e, 0x9c, 0xca, 0xcf, 0x23, 0xa7, 0xf2, 0x8a, 0x78, 0xbe, 0xd8, 0xe8, 0x34, 0x71, 0x8b,
	0x6f, 0xda, 0x72, 0xdb, 0x75, 0xb2, 0x63, 0x6b, 0x8a, 0xdd, 0x88, 0xc5, 0xcd, 0x7e, 0xf9, 0xd1,
	0x54, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x27, 0x7e, 0x6a, 0xae, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a StakeStorage by index.
	StakeStorage(ctx context.Context, in *QueryGetStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetStakeStorageResponse, error)
	// Queries a list of StakeStorage items.
	StakeStorageAll(ctx context.Context, in *QueryAllStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllStakeStorageResponse, error)
	// Queries a EpochDetails by index.
	EpochDetails(ctx context.Context, in *QueryGetEpochDetailsRequest, opts ...grpc.CallOption) (*QueryGetEpochDetailsResponse, error)
	// Queries a FixatedParams by index.
	FixatedParams(ctx context.Context, in *QueryGetFixatedParamsRequest, opts ...grpc.CallOption) (*QueryGetFixatedParamsResponse, error)
	// Queries a list of FixatedParams items.
	FixatedParamsAll(ctx context.Context, in *QueryAllFixatedParamsRequest, opts ...grpc.CallOption) (*QueryAllFixatedParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.epochstorage.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeStorage(ctx context.Context, in *QueryGetStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetStakeStorageResponse, error) {
	out := new(QueryGetStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.epochstorage.Query/StakeStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeStorageAll(ctx context.Context, in *QueryAllStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllStakeStorageResponse, error) {
	out := new(QueryAllStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.epochstorage.Query/StakeStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochDetails(ctx context.Context, in *QueryGetEpochDetailsRequest, opts ...grpc.CallOption) (*QueryGetEpochDetailsResponse, error) {
	out := new(QueryGetEpochDetailsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.epochstorage.Query/EpochDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FixatedParams(ctx context.Context, in *QueryGetFixatedParamsRequest, opts ...grpc.CallOption) (*QueryGetFixatedParamsResponse, error) {
	out := new(QueryGetFixatedParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.epochstorage.Query/FixatedParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FixatedParamsAll(ctx context.Context, in *QueryAllFixatedParamsRequest, opts ...grpc.CallOption) (*QueryAllFixatedParamsResponse, error) {
	out := new(QueryAllFixatedParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.epochstorage.Query/FixatedParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a StakeStorage by index.
	StakeStorage(context.Context, *QueryGetStakeStorageRequest) (*QueryGetStakeStorageResponse, error)
	// Queries a list of StakeStorage items.
	StakeStorageAll(context.Context, *QueryAllStakeStorageRequest) (*QueryAllStakeStorageResponse, error)
	// Queries a EpochDetails by index.
	EpochDetails(context.Context, *QueryGetEpochDetailsRequest) (*QueryGetEpochDetailsResponse, error)
	// Queries a FixatedParams by index.
	FixatedParams(context.Context, *QueryGetFixatedParamsRequest) (*QueryGetFixatedParamsResponse, error)
	// Queries a list of FixatedParams items.
	FixatedParamsAll(context.Context, *QueryAllFixatedParamsRequest) (*QueryAllFixatedParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StakeStorage(ctx context.Context, req *QueryGetStakeStorageRequest) (*QueryGetStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeStorage not implemented")
}
func (*UnimplementedQueryServer) StakeStorageAll(ctx context.Context, req *QueryAllStakeStorageRequest) (*QueryAllStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeStorageAll not implemented")
}
func (*UnimplementedQueryServer) EpochDetails(ctx context.Context, req *QueryGetEpochDetailsRequest) (*QueryGetEpochDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochDetails not implemented")
}
func (*UnimplementedQueryServer) FixatedParams(ctx context.Context, req *QueryGetFixatedParamsRequest) (*QueryGetFixatedParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixatedParams not implemented")
}
func (*UnimplementedQueryServer) FixatedParamsAll(ctx context.Context, req *QueryAllFixatedParamsRequest) (*QueryAllFixatedParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixatedParamsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.epochstorage.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.epochstorage.Query/StakeStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeStorage(ctx, req.(*QueryGetStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.epochstorage.Query/StakeStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeStorageAll(ctx, req.(*QueryAllStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.epochstorage.Query/EpochDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochDetails(ctx, req.(*QueryGetEpochDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FixatedParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFixatedParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FixatedParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.epochstorage.Query/FixatedParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FixatedParams(ctx, req.(*QueryGetFixatedParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FixatedParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFixatedParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FixatedParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.epochstorage.Query/FixatedParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FixatedParamsAll(ctx, req.(*QueryAllFixatedParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.epochstorage.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StakeStorage",
			Handler:    _Query_StakeStorage_Handler,
		},
		{
			MethodName: "StakeStorageAll",
			Handler:    _Query_StakeStorageAll_Handler,
		},
		{
			MethodName: "EpochDetails",
			Handler:    _Query_EpochDetails_Handler,
		},
		{
			MethodName: "FixatedParams",
			Handler:    _Query_FixatedParams_Handler,
		},
		{
			MethodName: "FixatedParamsAll",
			Handler:    _Query_FixatedParamsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/epochstorage/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakeStorage) > 0 {
		for iNdEx := len(m.StakeStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFixatedParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFixatedParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFixatedParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFixatedParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFixatedParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFixatedParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FixatedParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFixatedParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFixatedParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFixatedParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFixatedParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFixatedParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFixatedParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FixatedParams) > 0 {
		for iNdEx := len(m.FixatedParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FixatedParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakeStorage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeStorage) > 0 {
		for _, e := range m.StakeStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochDetails.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFixatedParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFixatedParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FixatedParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFixatedParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFixatedParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FixatedParams) > 0 {
		for _, e := range m.FixatedParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeStorage = append(m.StakeStorage, StakeStorage{})
			if err := m.StakeStorage[len(m.StakeStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFixatedParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFixatedParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFixatedParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFixatedParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFixatedParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFixatedParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixatedParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixatedParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFixatedParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFixatedParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFixatedParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFixatedParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFixatedParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFixatedParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixatedParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixatedParams = append(m.FixatedParams, FixatedParams{})
			if err := m.FixatedParams[len(m.FixatedParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
