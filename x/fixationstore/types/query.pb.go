// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/fixationstore/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAllIndicesRequest struct {
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *QueryAllIndicesRequest) Reset()         { *m = QueryAllIndicesRequest{} }
func (m *QueryAllIndicesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIndicesRequest) ProtoMessage()    {}
func (*QueryAllIndicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{0}
}
func (m *QueryAllIndicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIndicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIndicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIndicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIndicesRequest.Merge(m, src)
}
func (m *QueryAllIndicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIndicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIndicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIndicesRequest proto.InternalMessageInfo

func (m *QueryAllIndicesRequest) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *QueryAllIndicesRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type QueryAllIndicesResponse struct {
	Indices []string `protobuf:"bytes,1,rep,name=indices,proto3" json:"indices,omitempty"`
}

func (m *QueryAllIndicesResponse) Reset()         { *m = QueryAllIndicesResponse{} }
func (m *QueryAllIndicesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIndicesResponse) ProtoMessage()    {}
func (*QueryAllIndicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{1}
}
func (m *QueryAllIndicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIndicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIndicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIndicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIndicesResponse.Merge(m, src)
}
func (m *QueryAllIndicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIndicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIndicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIndicesResponse proto.InternalMessageInfo

func (m *QueryAllIndicesResponse) GetIndices() []string {
	if m != nil {
		return m.Indices
	}
	return nil
}

type QueryStoreKeysRequest struct {
}

func (m *QueryStoreKeysRequest) Reset()         { *m = QueryStoreKeysRequest{} }
func (m *QueryStoreKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStoreKeysRequest) ProtoMessage()    {}
func (*QueryStoreKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{2}
}
func (m *QueryStoreKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoreKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoreKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoreKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoreKeysRequest.Merge(m, src)
}
func (m *QueryStoreKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoreKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoreKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoreKeysRequest proto.InternalMessageInfo

type StoreKeyAndPrefix struct {
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *StoreKeyAndPrefix) Reset()         { *m = StoreKeyAndPrefix{} }
func (m *StoreKeyAndPrefix) String() string { return proto.CompactTextString(m) }
func (*StoreKeyAndPrefix) ProtoMessage()    {}
func (*StoreKeyAndPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{3}
}
func (m *StoreKeyAndPrefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreKeyAndPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreKeyAndPrefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreKeyAndPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreKeyAndPrefix.Merge(m, src)
}
func (m *StoreKeyAndPrefix) XXX_Size() int {
	return m.Size()
}
func (m *StoreKeyAndPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreKeyAndPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_StoreKeyAndPrefix proto.InternalMessageInfo

func (m *StoreKeyAndPrefix) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *StoreKeyAndPrefix) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type QueryStoreKeysResponse struct {
	Keys []StoreKeyAndPrefix `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
}

func (m *QueryStoreKeysResponse) Reset()         { *m = QueryStoreKeysResponse{} }
func (m *QueryStoreKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStoreKeysResponse) ProtoMessage()    {}
func (*QueryStoreKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{4}
}
func (m *QueryStoreKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoreKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoreKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoreKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoreKeysResponse.Merge(m, src)
}
func (m *QueryStoreKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoreKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoreKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoreKeysResponse proto.InternalMessageInfo

func (m *QueryStoreKeysResponse) GetKeys() []StoreKeyAndPrefix {
	if m != nil {
		return m.Keys
	}
	return nil
}

type QueryVersionsRequest struct {
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryVersionsRequest) Reset()         { *m = QueryVersionsRequest{} }
func (m *QueryVersionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVersionsRequest) ProtoMessage()    {}
func (*QueryVersionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{5}
}
func (m *QueryVersionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVersionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVersionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVersionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVersionsRequest.Merge(m, src)
}
func (m *QueryVersionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVersionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVersionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVersionsRequest proto.InternalMessageInfo

func (m *QueryVersionsRequest) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *QueryVersionsRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *QueryVersionsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryVersionsResponse struct {
	Entries []Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries"`
}

func (m *QueryVersionsResponse) Reset()         { *m = QueryVersionsResponse{} }
func (m *QueryVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVersionsResponse) ProtoMessage()    {}
func (*QueryVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{6}
}
func (m *QueryVersionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVersionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVersionsResponse.Merge(m, src)
}
func (m *QueryVersionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVersionsResponse proto.InternalMessageInfo

func (m *QueryVersionsResponse) GetEntries() []Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type QueryEntryRequest struct {
	StoreKey   string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix     string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Block      uint64 `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`
	HideData   bool   `protobuf:"varint,5,opt,name=hide_data,json=hideData,proto3" json:"hide_data,omitempty"`
	StringData bool   `protobuf:"varint,6,opt,name=string_data,json=stringData,proto3" json:"string_data,omitempty"`
}

func (m *QueryEntryRequest) Reset()         { *m = QueryEntryRequest{} }
func (m *QueryEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEntryRequest) ProtoMessage()    {}
func (*QueryEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{7}
}
func (m *QueryEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEntryRequest.Merge(m, src)
}
func (m *QueryEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEntryRequest proto.InternalMessageInfo

func (m *QueryEntryRequest) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *QueryEntryRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *QueryEntryRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueryEntryRequest) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *QueryEntryRequest) GetHideData() bool {
	if m != nil {
		return m.HideData
	}
	return false
}

func (m *QueryEntryRequest) GetStringData() bool {
	if m != nil {
		return m.StringData
	}
	return false
}

type QueryEntryResponse struct {
	Entry      *Entry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	StringData string `protobuf:"bytes,2,opt,name=string_data,json=stringData,proto3" json:"string_data,omitempty"`
}

func (m *QueryEntryResponse) Reset()         { *m = QueryEntryResponse{} }
func (m *QueryEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEntryResponse) ProtoMessage()    {}
func (*QueryEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_300bcc00a24e7b21, []int{8}
}
func (m *QueryEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEntryResponse.Merge(m, src)
}
func (m *QueryEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEntryResponse proto.InternalMessageInfo

func (m *QueryEntryResponse) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *QueryEntryResponse) GetStringData() string {
	if m != nil {
		return m.StringData
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryAllIndicesRequest)(nil), "lavanet.lava.fixationstore.QueryAllIndicesRequest")
	proto.RegisterType((*QueryAllIndicesResponse)(nil), "lavanet.lava.fixationstore.QueryAllIndicesResponse")
	proto.RegisterType((*QueryStoreKeysRequest)(nil), "lavanet.lava.fixationstore.QueryStoreKeysRequest")
	proto.RegisterType((*StoreKeyAndPrefix)(nil), "lavanet.lava.fixationstore.StoreKeyAndPrefix")
	proto.RegisterType((*QueryStoreKeysResponse)(nil), "lavanet.lava.fixationstore.QueryStoreKeysResponse")
	proto.RegisterType((*QueryVersionsRequest)(nil), "lavanet.lava.fixationstore.QueryVersionsRequest")
	proto.RegisterType((*QueryVersionsResponse)(nil), "lavanet.lava.fixationstore.QueryVersionsResponse")
	proto.RegisterType((*QueryEntryRequest)(nil), "lavanet.lava.fixationstore.QueryEntryRequest")
	proto.RegisterType((*QueryEntryResponse)(nil), "lavanet.lava.fixationstore.QueryEntryResponse")
}

func init() {
	proto.RegisterFile("lavanet/lava/fixationstore/query.proto", fileDescriptor_300bcc00a24e7b21)
}

var fileDescriptor_300bcc00a24e7b21 = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xd0, 0x85, 0xf6, 0xe1, 0xf2, 0x63, 0xc2, 0x0f, 0x36, 0xab, 0x59, 0xea, 0x1e,
	0x48, 0x3d, 0xb0, 0x03, 0xe5, 0xe0, 0xc5, 0x68, 0x4a, 0x50, 0xfc, 0x9b, 0xe8, 0x9a, 0x78, 0x20,
	0x31, 0x64, 0xa1, 0xc3, 0xb2, 0x61, 0xdd, 0x29, 0xbb, 0x03, 0x61, 0xd3, 0x70, 0xf1, 0x15, 0x98,
	0xf8, 0x0e, 0x7c, 0x01, 0x9e, 0x3c, 0x98, 0xf8, 0x06, 0x38, 0x92, 0x78, 0xf1, 0x60, 0x8c, 0x01,
	0x5f, 0x88, 0x99, 0x3f, 0x5b, 0x4a, 0xc1, 0x2d, 0x55, 0x4f, 0xdd, 0x79, 0xe6, 0xf9, 0x3e, 0xdf,
	0xcf, 0x33, 0x33, 0x4f, 0x0a, 0x73, 0x91, 0xbf, 0xef, 0xc7, 0x94, 0x13, 0xf1, 0x4b, 0xb6, 0xc2,
	0x03, 0x9f, 0x87, 0x2c, 0x4e, 0x39, 0x4b, 0x28, 0xd9, 0xdd, 0xa3, 0x49, 0xe6, 0xb6, 0x13, 0xc6,
	0x19, 0xb6, 0x74, 0x9e, 0x2b, 0x7e, 0xdd, 0x73, 0x79, 0xd6, 0x54, 0xc0, 0x02, 0x26, 0xd3, 0x88,
	0xf8, 0x52, 0x0a, 0xeb, 0x7a, 0xc0, 0x58, 0x10, 0x51, 0xe2, 0xb7, 0x43, 0xe2, 0xc7, 0x31, 0xe3,
	0x4a, 0xa1, 0x77, 0x6f, 0x16, 0xf8, 0xe6, 0x2b, 0x95, 0xea, 0x3c, 0x85, 0xe9, 0xe7, 0x82, 0xa4,
	0x19, 0x45, 0x0f, 0xe3, 0x56, 0xb8, 0x49, 0x53, 0x8f, 0xee, 0xee, 0xd1, 0x94, 0xe3, 0x6b, 0x50,
	0x95, 0x8a, 0xf5, 0x1d, 0x9a, 0x99, 0xa8, 0x86, 0xea, 0x55, 0xaf, 0x22, 0x03, 0x8f, 0x69, 0x86,
	0xa7, 0x61, 0xac, 0x9d, 0xd0, 0xad, 0xf0, 0xc0, 0x1c, 0x91, 0x3b, 0x7a, 0xe5, 0x2c, 0xc1, 0xcc,
	0x85, 0x72, 0x69, 0x9b, 0xc5, 0x29, 0xc5, 0x26, 0x8c, 0x87, 0x2a, 0x64, 0xa2, 0xda, 0x68, 0xbd,
	0xea, 0xe5, 0x4b, 0x67, 0x06, 0xfe, 0x97, 0xa2, 0x17, 0xba, 0x7a, 0x8e, 0xe0, 0x3c, 0x80, 0xc9,
	0x3c, 0xd6, 0x8c, 0x5b, 0xcf, 0xa4, 0xc5, 0x9f, 0x71, 0xf9, 0xba, 0xcd, 0x1e, 0x0b, 0x8d, 0xb5,
	0x0a, 0xe5, 0x1d, 0x9a, 0x29, 0xa6, 0x89, 0xc6, 0xbc, 0xfb, 0xfb, 0xab, 0x70, 0x2f, 0xb0, 0x2c,
	0x97, 0x8f, 0xbe, 0xcf, 0x96, 0x3c, 0x59, 0xc0, 0x79, 0x05, 0x53, 0xd2, 0xe2, 0x25, 0x4d, 0x52,
	0x21, 0xf9, 0x9b, 0x73, 0xc4, 0xff, 0xc1, 0xa8, 0x48, 0x1f, 0x95, 0x41, 0xf1, 0xe9, 0xac, 0xe9,
	0x43, 0x3a, 0x2b, 0xaf, 0x1b, 0x68, 0xc2, 0x38, 0x8d, 0x79, 0x12, 0xd2, 0xbc, 0x87, 0x1b, 0x45,
	0x3d, 0xdc, 0x8b, 0x79, 0x92, 0x69, 0xee, 0x5c, 0xe7, 0x7c, 0x40, 0x30, 0x29, 0x8b, 0xcb, 0xdd,
	0x7f, 0x0b, 0x8e, 0xa7, 0xc0, 0xd8, 0x88, 0xd8, 0xe6, 0x8e, 0x59, 0xae, 0xa1, 0x7a, 0xd9, 0x53,
	0x0b, 0x51, 0x7c, 0x3b, 0x6c, 0xd1, 0xf5, 0x96, 0xcf, 0x7d, 0xd3, 0xa8, 0xa1, 0x7a, 0xc5, 0xab,
	0x88, 0xc0, 0x8a, 0xcf, 0x7d, 0x3c, 0x0b, 0x13, 0x29, 0x4f, 0xc2, 0x38, 0x50, 0xdb, 0x63, 0x72,
	0x1b, 0x54, 0x48, 0x24, 0x38, 0x31, 0xe0, 0x5e, 0x5e, 0x7d, 0x12, 0xb7, 0xc0, 0x10, 0x1d, 0x29,
	0xd8, 0xab, 0x9c, 0x83, 0xa7, 0xf2, 0xfb, 0xfd, 0x54, 0x47, 0x3d, 0x7e, 0x8d, 0x6f, 0x06, 0x18,
	0xd2, 0x10, 0x7f, 0x46, 0x00, 0x67, 0x8f, 0x1b, 0x37, 0x8a, 0x3c, 0x2e, 0x1f, 0x2c, 0x6b, 0x69,
	0x28, 0x8d, 0xea, 0xcd, 0x59, 0x79, 0xf3, 0xe5, 0xe7, 0xbb, 0x91, 0x3b, 0xf8, 0x36, 0x29, 0x98,
	0x6d, 0x3f, 0x8a, 0xd6, 0xf5, 0x50, 0x91, 0x4e, 0xf7, 0xee, 0x0e, 0x49, 0x47, 0x5d, 0xce, 0x21,
	0x7e, 0x8f, 0xa0, 0xda, 0x1d, 0x01, 0xbc, 0x38, 0x10, 0xa4, 0x7f, 0x22, 0xad, 0xc6, 0x30, 0x12,
	0x8d, 0xee, 0x4a, 0xf4, 0x3a, 0x9e, 0x2b, 0x42, 0xef, 0xd2, 0xa6, 0xf8, 0x13, 0x82, 0x4a, 0xfe,
	0xca, 0xf1, 0xc2, 0x40, 0xc3, 0xbe, 0x79, 0xb3, 0x16, 0x87, 0x50, 0x68, 0xc2, 0x55, 0x49, 0xd8,
	0xc4, 0x77, 0x8b, 0x08, 0xf7, 0xb5, 0xea, 0xd2, 0x93, 0x25, 0x1d, 0xb1, 0xc4, 0x1f, 0x11, 0x18,
	0xf2, 0x65, 0xe1, 0xf9, 0x81, 0x14, 0xbd, 0xb3, 0x66, 0xb9, 0x57, 0x4d, 0xd7, 0xc4, 0x4f, 0x24,
	0xf1, 0x7d, 0xbc, 0x52, 0x44, 0x2c, 0x25, 0x05, 0xb8, 0xa4, 0x23, 0x67, 0xf1, 0x70, 0xf9, 0xd1,
	0xd1, 0x89, 0x8d, 0x8e, 0x4f, 0x6c, 0xf4, 0xe3, 0xc4, 0x46, 0x6f, 0x4f, 0xed, 0xd2, 0xf1, 0xa9,
	0x5d, 0xfa, 0x7a, 0x6a, 0x97, 0xd6, 0x16, 0x82, 0x90, 0x6f, 0xef, 0x6d, 0xb8, 0x9b, 0xec, 0xf5,
	0x79, 0xa7, 0xfd, 0x06, 0x39, 0xe8, 0xb3, 0xe3, 0x59, 0x9b, 0xa6, 0x1b, 0x63, 0xf2, 0x7f, 0x65,
	0xe9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x4e, 0xbe, 0xd4, 0xfc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a fixation store for all its indices.
	AllIndices(ctx context.Context, in *QueryAllIndicesRequest, opts ...grpc.CallOption) (*QueryAllIndicesResponse, error)
	// Queries for all store keys.
	StoreKeys(ctx context.Context, in *QueryStoreKeysRequest, opts ...grpc.CallOption) (*QueryStoreKeysResponse, error)
	// Queries for all versions of a specific entry (versions = different blocks).
	Versions(ctx context.Context, in *QueryVersionsRequest, opts ...grpc.CallOption) (*QueryVersionsResponse, error)
	// Queries for a specific entry with detailed information.
	Entry(ctx context.Context, in *QueryEntryRequest, opts ...grpc.CallOption) (*QueryEntryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllIndices(ctx context.Context, in *QueryAllIndicesRequest, opts ...grpc.CallOption) (*QueryAllIndicesResponse, error) {
	out := new(QueryAllIndicesResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.fixationstore.Query/AllIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoreKeys(ctx context.Context, in *QueryStoreKeysRequest, opts ...grpc.CallOption) (*QueryStoreKeysResponse, error) {
	out := new(QueryStoreKeysResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.fixationstore.Query/StoreKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Versions(ctx context.Context, in *QueryVersionsRequest, opts ...grpc.CallOption) (*QueryVersionsResponse, error) {
	out := new(QueryVersionsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.fixationstore.Query/Versions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Entry(ctx context.Context, in *QueryEntryRequest, opts ...grpc.CallOption) (*QueryEntryResponse, error) {
	out := new(QueryEntryResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.fixationstore.Query/Entry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a fixation store for all its indices.
	AllIndices(context.Context, *QueryAllIndicesRequest) (*QueryAllIndicesResponse, error)
	// Queries for all store keys.
	StoreKeys(context.Context, *QueryStoreKeysRequest) (*QueryStoreKeysResponse, error)
	// Queries for all versions of a specific entry (versions = different blocks).
	Versions(context.Context, *QueryVersionsRequest) (*QueryVersionsResponse, error)
	// Queries for a specific entry with detailed information.
	Entry(context.Context, *QueryEntryRequest) (*QueryEntryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllIndices(ctx context.Context, req *QueryAllIndicesRequest) (*QueryAllIndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIndices not implemented")
}
func (*UnimplementedQueryServer) StoreKeys(ctx context.Context, req *QueryStoreKeysRequest) (*QueryStoreKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKeys not implemented")
}
func (*UnimplementedQueryServer) Versions(ctx context.Context, req *QueryVersionsRequest) (*QueryVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Versions not implemented")
}
func (*UnimplementedQueryServer) Entry(ctx context.Context, req *QueryEntryRequest) (*QueryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entry not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.fixationstore.Query/AllIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIndices(ctx, req.(*QueryAllIndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoreKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStoreKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoreKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.fixationstore.Query/StoreKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoreKeys(ctx, req.(*QueryStoreKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Versions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Versions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.fixationstore.Query/Versions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Versions(ctx, req.(*QueryVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Entry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Entry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.fixationstore.Query/Entry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Entry(ctx, req.(*QueryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.fixationstore.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllIndices",
			Handler:    _Query_AllIndices_Handler,
		},
		{
			MethodName: "StoreKeys",
			Handler:    _Query_StoreKeys_Handler,
		},
		{
			MethodName: "Versions",
			Handler:    _Query_Versions_Handler,
		},
		{
			MethodName: "Entry",
			Handler:    _Query_Entry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/fixationstore/query.proto",
}

func (m *QueryAllIndicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIndicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIndicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIndicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIndicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIndicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indices) > 0 {
		for iNdEx := len(m.Indices) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indices[iNdEx])
			copy(dAtA[i:], m.Indices[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Indices[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoreKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoreKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoreKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StoreKeyAndPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreKeyAndPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreKeyAndPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoreKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoreKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoreKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVersionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVersionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVersionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVersionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVersionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVersionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StringData {
		i--
		if m.StringData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.HideData {
		i--
		if m.HideData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StringData) > 0 {
		i -= len(m.StringData)
		copy(dAtA[i:], m.StringData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StringData)))
		i--
		dAtA[i] = 0x12
	}
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllIndicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIndicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Indices) > 0 {
		for _, s := range m.Indices {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStoreKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StoreKeyAndPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoreKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVersionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVersionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	if m.HideData {
		n += 2
	}
	if m.StringData {
		n += 2
	}
	return n
}

func (m *QueryEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StringData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllIndicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIndicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIndicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIndicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIndicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIndicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indices = append(m.Indices, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoreKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoreKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoreKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreKeyAndPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreKeyAndPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreKeyAndPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoreKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoreKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoreKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, StoreKeyAndPrefix{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVersionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVersionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVersionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVersionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVersionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVersionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideData = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StringData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
