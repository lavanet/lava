// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/conflict/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO:: change coin type to another proto (define proto in another file int this directory)
type MsgDetection struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// Types that are valid to be assigned to Conflict:
	//	*MsgDetection_FinalizationConflict
	//	*MsgDetection_ResponseConflict
	Conflict isMsgDetection_Conflict `protobuf_oneof:"conflict"`
}

func (m *MsgDetection) Reset()         { *m = MsgDetection{} }
func (m *MsgDetection) String() string { return proto.CompactTextString(m) }
func (*MsgDetection) ProtoMessage()    {}
func (*MsgDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d098f1e58e895a1, []int{0}
}
func (m *MsgDetection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDetection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDetection.Merge(m, src)
}
func (m *MsgDetection) XXX_Size() int {
	return m.Size()
}
func (m *MsgDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDetection.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDetection proto.InternalMessageInfo

type isMsgDetection_Conflict interface {
	isMsgDetection_Conflict()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgDetection_FinalizationConflict struct {
	FinalizationConflict *FinalizationConflict `protobuf:"bytes,5,opt,name=finalization_conflict,json=finalizationConflict,proto3,oneof" json:"finalization_conflict,omitempty"`
}
type MsgDetection_ResponseConflict struct {
	ResponseConflict *ResponseConflict `protobuf:"bytes,6,opt,name=response_conflict,json=responseConflict,proto3,oneof" json:"response_conflict,omitempty"`
}

func (*MsgDetection_FinalizationConflict) isMsgDetection_Conflict() {}
func (*MsgDetection_ResponseConflict) isMsgDetection_Conflict()     {}

func (m *MsgDetection) GetConflict() isMsgDetection_Conflict {
	if m != nil {
		return m.Conflict
	}
	return nil
}

func (m *MsgDetection) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDetection) GetFinalizationConflict() *FinalizationConflict {
	if x, ok := m.GetConflict().(*MsgDetection_FinalizationConflict); ok {
		return x.FinalizationConflict
	}
	return nil
}

func (m *MsgDetection) GetResponseConflict() *ResponseConflict {
	if x, ok := m.GetConflict().(*MsgDetection_ResponseConflict); ok {
		return x.ResponseConflict
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgDetection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgDetection_FinalizationConflict)(nil),
		(*MsgDetection_ResponseConflict)(nil),
	}
}

type MsgDetectionResponse struct {
}

func (m *MsgDetectionResponse) Reset()         { *m = MsgDetectionResponse{} }
func (m *MsgDetectionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDetectionResponse) ProtoMessage()    {}
func (*MsgDetectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d098f1e58e895a1, []int{1}
}
func (m *MsgDetectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDetectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDetectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDetectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDetectionResponse.Merge(m, src)
}
func (m *MsgDetectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDetectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDetectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDetectionResponse proto.InternalMessageInfo

type MsgConflictVoteCommit struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VoteID  string `protobuf:"bytes,2,opt,name=voteID,proto3" json:"voteID,omitempty"`
	Hash    []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgConflictVoteCommit) Reset()         { *m = MsgConflictVoteCommit{} }
func (m *MsgConflictVoteCommit) String() string { return proto.CompactTextString(m) }
func (*MsgConflictVoteCommit) ProtoMessage()    {}
func (*MsgConflictVoteCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d098f1e58e895a1, []int{2}
}
func (m *MsgConflictVoteCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConflictVoteCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConflictVoteCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConflictVoteCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConflictVoteCommit.Merge(m, src)
}
func (m *MsgConflictVoteCommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgConflictVoteCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConflictVoteCommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConflictVoteCommit proto.InternalMessageInfo

func (m *MsgConflictVoteCommit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgConflictVoteCommit) GetVoteID() string {
	if m != nil {
		return m.VoteID
	}
	return ""
}

func (m *MsgConflictVoteCommit) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type MsgConflictVoteCommitResponse struct {
}

func (m *MsgConflictVoteCommitResponse) Reset()         { *m = MsgConflictVoteCommitResponse{} }
func (m *MsgConflictVoteCommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConflictVoteCommitResponse) ProtoMessage()    {}
func (*MsgConflictVoteCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d098f1e58e895a1, []int{3}
}
func (m *MsgConflictVoteCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConflictVoteCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConflictVoteCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConflictVoteCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConflictVoteCommitResponse.Merge(m, src)
}
func (m *MsgConflictVoteCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConflictVoteCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConflictVoteCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConflictVoteCommitResponse proto.InternalMessageInfo

type MsgConflictVoteReveal struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VoteID  string `protobuf:"bytes,2,opt,name=voteID,proto3" json:"voteID,omitempty"`
	Nonce   int64  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Hash    []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgConflictVoteReveal) Reset()         { *m = MsgConflictVoteReveal{} }
func (m *MsgConflictVoteReveal) String() string { return proto.CompactTextString(m) }
func (*MsgConflictVoteReveal) ProtoMessage()    {}
func (*MsgConflictVoteReveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d098f1e58e895a1, []int{4}
}
func (m *MsgConflictVoteReveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConflictVoteReveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConflictVoteReveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConflictVoteReveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConflictVoteReveal.Merge(m, src)
}
func (m *MsgConflictVoteReveal) XXX_Size() int {
	return m.Size()
}
func (m *MsgConflictVoteReveal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConflictVoteReveal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConflictVoteReveal proto.InternalMessageInfo

func (m *MsgConflictVoteReveal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgConflictVoteReveal) GetVoteID() string {
	if m != nil {
		return m.VoteID
	}
	return ""
}

func (m *MsgConflictVoteReveal) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgConflictVoteReveal) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type MsgConflictVoteRevealResponse struct {
}

func (m *MsgConflictVoteRevealResponse) Reset()         { *m = MsgConflictVoteRevealResponse{} }
func (m *MsgConflictVoteRevealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConflictVoteRevealResponse) ProtoMessage()    {}
func (*MsgConflictVoteRevealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d098f1e58e895a1, []int{5}
}
func (m *MsgConflictVoteRevealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConflictVoteRevealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConflictVoteRevealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConflictVoteRevealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConflictVoteRevealResponse.Merge(m, src)
}
func (m *MsgConflictVoteRevealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConflictVoteRevealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConflictVoteRevealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConflictVoteRevealResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDetection)(nil), "lavanet.lava.conflict.MsgDetection")
	proto.RegisterType((*MsgDetectionResponse)(nil), "lavanet.lava.conflict.MsgDetectionResponse")
	proto.RegisterType((*MsgConflictVoteCommit)(nil), "lavanet.lava.conflict.MsgConflictVoteCommit")
	proto.RegisterType((*MsgConflictVoteCommitResponse)(nil), "lavanet.lava.conflict.MsgConflictVoteCommitResponse")
	proto.RegisterType((*MsgConflictVoteReveal)(nil), "lavanet.lava.conflict.MsgConflictVoteReveal")
	proto.RegisterType((*MsgConflictVoteRevealResponse)(nil), "lavanet.lava.conflict.MsgConflictVoteRevealResponse")
}

func init() { proto.RegisterFile("lavanet/lava/conflict/tx.proto", fileDescriptor_8d098f1e58e895a1) }

var fileDescriptor_8d098f1e58e895a1 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x63, 0x37, 0xa4, 0x47, 0x87, 0xf4, 0x94, 0x14, 0x2b, 0x08, 0x13, 0x85, 0x81, 0x40,
	0x90, 0x4f, 0x2d, 0x9d, 0x3a, 0xb6, 0x05, 0x41, 0xa4, 0x2c, 0x1e, 0x3a, 0x20, 0xa1, 0xea, 0x6c,
	0x2e, 0x8e, 0xa5, 0xf8, 0x5e, 0xe4, 0x3b, 0xac, 0xc0, 0xc2, 0xce, 0xc4, 0xc2, 0xc4, 0x3f, 0xc1,
	0x9f, 0xc1, 0xd8, 0xb1, 0x23, 0x4a, 0x06, 0xfe, 0x0d, 0xe4, 0x1f, 0xe7, 0xba, 0xc4, 0x41, 0x81,
	0x25, 0xf7, 0xee, 0xbd, 0x2f, 0xdf, 0xf7, 0xdd, 0x7b, 0xd6, 0x43, 0xd6, 0x8c, 0xc6, 0x94, 0x33,
	0x49, 0x92, 0x93, 0x78, 0xc0, 0x27, 0xb3, 0xc0, 0x93, 0x44, 0x2e, 0xec, 0x79, 0x04, 0x12, 0x70,
	0x27, 0xaf, 0xdb, 0xc9, 0x69, 0xab, 0x7a, 0x77, 0x9f, 0x86, 0x01, 0x07, 0x92, 0xfe, 0x66, 0xc8,
	0xae, 0xe5, 0x81, 0x08, 0x41, 0x10, 0x97, 0x0a, 0x46, 0xe2, 0x43, 0x97, 0x49, 0x7a, 0x48, 0x3c,
	0x08, 0x78, 0x5e, 0x6f, 0xfb, 0xe0, 0x43, 0x1a, 0x92, 0x24, 0xca, 0xb3, 0x4f, 0xaa, 0xf5, 0x55,
	0x70, 0xf9, 0x8e, 0x4a, 0x9a, 0x41, 0xfb, 0xdf, 0xea, 0x68, 0x6f, 0x2c, 0xfc, 0x73, 0x26, 0x99,
	0x27, 0x03, 0xe0, 0xd8, 0x44, 0x77, 0xbc, 0x88, 0x51, 0x09, 0x91, 0xa9, 0xf5, 0xb4, 0xc1, 0xae,
	0xa3, 0xae, 0xd8, 0x45, 0x9d, 0x49, 0xc0, 0xe9, 0x2c, 0xf8, 0x48, 0x13, 0xe4, 0xa5, 0xa2, 0x33,
	0x77, 0x7a, 0xda, 0xe0, 0xee, 0xd1, 0xd0, 0xae, 0x7c, 0x95, 0xfd, 0xb2, 0xf4, 0x9f, 0xb3, 0x3c,
	0xf9, 0xaa, 0xe6, 0xb4, 0x27, 0x15, 0x79, 0x7c, 0x81, 0xf6, 0x23, 0x26, 0xe6, 0xc0, 0x05, 0xbb,
	0xe1, 0x6f, 0xa4, 0xfc, 0x8f, 0x37, 0xf0, 0x3b, 0x39, 0xbe, 0xc4, 0xdd, 0x8a, 0xfe, 0xc8, 0x9d,
	0xdc, 0xfb, 0xfc, 0xeb, 0xfb, 0x53, 0x5c, 0x74, 0xa2, 0x78, 0xee, 0x29, 0x42, 0x4d, 0x95, 0x1d,
	0x19, 0xcd, 0x7a, 0x4b, 0x1f, 0x19, 0x4d, 0xbd, 0x65, 0x8c, 0x8c, 0xa6, 0xd1, 0xda, 0xe9, 0x1f,
	0xa0, 0x76, 0xb9, 0x39, 0x4a, 0xaa, 0xff, 0x09, 0x75, 0xc6, 0xc2, 0x57, 0xec, 0x17, 0x20, 0xd9,
	0x19, 0x84, 0x61, 0x20, 0xff, 0xd2, 0xbd, 0x03, 0xd4, 0x88, 0x41, 0xb2, 0xd7, 0xe7, 0x66, 0x3d,
	0x2d, 0xe4, 0x37, 0x8c, 0x91, 0x31, 0xa5, 0x62, 0x6a, 0xea, 0x3d, 0x6d, 0xb0, 0xe7, 0xa4, 0xf1,
	0x49, 0x2f, 0x71, 0x7b, 0xbf, 0x70, 0xbb, 0xae, 0xd3, 0x7f, 0x88, 0x1e, 0x54, 0x1a, 0x28, 0x1c,
	0x7e, 0xd5, 0xd6, 0x2c, 0x3a, 0x2c, 0x66, 0x74, 0xf6, 0x1f, 0x16, 0xdb, 0x68, 0x87, 0x03, 0xf7,
	0x58, 0xea, 0x51, 0x77, 0xb2, 0x4b, 0x61, 0xdc, 0xd8, 0xce, 0x78, 0xa6, 0x5e, 0x61, 0x3c, 0x2b,
	0x28, 0xe3, 0x47, 0xd7, 0x75, 0xa4, 0x8f, 0x85, 0x8f, 0xdf, 0xa2, 0xdd, 0x9b, 0x8f, 0xf2, 0xd1,
	0x86, 0xd9, 0x97, 0x87, 0xd3, 0x1d, 0x6e, 0x01, 0x52, 0x32, 0x78, 0x81, 0x70, 0xc5, 0xf8, 0x9e,
	0x6d, 0xa6, 0x58, 0x47, 0x77, 0x8f, 0xff, 0x05, 0xbd, 0x49, 0x39, 0x9f, 0xca, 0x96, 0xca, 0x19,
	0x7a, 0x5b, 0xe5, 0xdb, 0xad, 0x3d, 0x7d, 0xf1, 0x63, 0x69, 0x69, 0x57, 0x4b, 0x4b, 0xfb, 0xb9,
	0xb4, 0xb4, 0x2f, 0x2b, 0xab, 0x76, 0xb5, 0xb2, 0x6a, 0xd7, 0x2b, 0xab, 0xf6, 0x66, 0xe8, 0x07,
	0x72, 0xfa, 0xde, 0xb5, 0x3d, 0x08, 0xc9, 0xad, 0xdd, 0x11, 0x1f, 0x93, 0x45, 0x69, 0x81, 0x7d,
	0x98, 0x33, 0xe1, 0x36, 0xd2, 0xcd, 0xf1, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xb0,
	0xfd, 0x79, 0xe6, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Detection(ctx context.Context, in *MsgDetection, opts ...grpc.CallOption) (*MsgDetectionResponse, error)
	ConflictVoteCommit(ctx context.Context, in *MsgConflictVoteCommit, opts ...grpc.CallOption) (*MsgConflictVoteCommitResponse, error)
	ConflictVoteReveal(ctx context.Context, in *MsgConflictVoteReveal, opts ...grpc.CallOption) (*MsgConflictVoteRevealResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Detection(ctx context.Context, in *MsgDetection, opts ...grpc.CallOption) (*MsgDetectionResponse, error) {
	out := new(MsgDetectionResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.conflict.Msg/Detection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConflictVoteCommit(ctx context.Context, in *MsgConflictVoteCommit, opts ...grpc.CallOption) (*MsgConflictVoteCommitResponse, error) {
	out := new(MsgConflictVoteCommitResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.conflict.Msg/ConflictVoteCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConflictVoteReveal(ctx context.Context, in *MsgConflictVoteReveal, opts ...grpc.CallOption) (*MsgConflictVoteRevealResponse, error) {
	out := new(MsgConflictVoteRevealResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.conflict.Msg/ConflictVoteReveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Detection(context.Context, *MsgDetection) (*MsgDetectionResponse, error)
	ConflictVoteCommit(context.Context, *MsgConflictVoteCommit) (*MsgConflictVoteCommitResponse, error)
	ConflictVoteReveal(context.Context, *MsgConflictVoteReveal) (*MsgConflictVoteRevealResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Detection(ctx context.Context, req *MsgDetection) (*MsgDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detection not implemented")
}
func (*UnimplementedMsgServer) ConflictVoteCommit(ctx context.Context, req *MsgConflictVoteCommit) (*MsgConflictVoteCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConflictVoteCommit not implemented")
}
func (*UnimplementedMsgServer) ConflictVoteReveal(ctx context.Context, req *MsgConflictVoteReveal) (*MsgConflictVoteRevealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConflictVoteReveal not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Detection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDetection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Detection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.conflict.Msg/Detection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Detection(ctx, req.(*MsgDetection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConflictVoteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConflictVoteCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConflictVoteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.conflict.Msg/ConflictVoteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConflictVoteCommit(ctx, req.(*MsgConflictVoteCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConflictVoteReveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConflictVoteReveal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConflictVoteReveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.conflict.Msg/ConflictVoteReveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConflictVoteReveal(ctx, req.(*MsgConflictVoteReveal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.conflict.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detection",
			Handler:    _Msg_Detection_Handler,
		},
		{
			MethodName: "ConflictVoteCommit",
			Handler:    _Msg_ConflictVoteCommit_Handler,
		},
		{
			MethodName: "ConflictVoteReveal",
			Handler:    _Msg_ConflictVoteReveal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/conflict/tx.proto",
}

func (m *MsgDetection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conflict != nil {
		{
			size := m.Conflict.Size()
			i -= size
			if _, err := m.Conflict.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDetection_FinalizationConflict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDetection_FinalizationConflict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FinalizationConflict != nil {
		{
			size, err := m.FinalizationConflict.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MsgDetection_ResponseConflict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDetection_ResponseConflict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResponseConflict != nil {
		{
			size, err := m.ResponseConflict.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MsgDetectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDetectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDetectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConflictVoteCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConflictVoteCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConflictVoteCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoteID) > 0 {
		i -= len(m.VoteID)
		copy(dAtA[i:], m.VoteID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConflictVoteCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConflictVoteCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConflictVoteCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConflictVoteReveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConflictVoteReveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConflictVoteReveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VoteID) > 0 {
		i -= len(m.VoteID)
		copy(dAtA[i:], m.VoteID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConflictVoteRevealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConflictVoteRevealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConflictVoteRevealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Conflict != nil {
		n += m.Conflict.Size()
	}
	return n
}

func (m *MsgDetection_FinalizationConflict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalizationConflict != nil {
		l = m.FinalizationConflict.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *MsgDetection_ResponseConflict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseConflict != nil {
		l = m.ResponseConflict.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *MsgDetectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConflictVoteCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConflictVoteCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConflictVoteReveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConflictVoteRevealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDetection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDetection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDetection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizationConflict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FinalizationConflict{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Conflict = &MsgDetection_FinalizationConflict{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseConflict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseConflict{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Conflict = &MsgDetection_ResponseConflict{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDetectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDetectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDetectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConflictVoteCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConflictVoteCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConflictVoteCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConflictVoteCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConflictVoteCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConflictVoteCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConflictVoteReveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConflictVoteReveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConflictVoteReveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConflictVoteRevealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConflictVoteRevealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConflictVoteRevealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
