// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/conflict/conflict_data.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/lavanet/lava/v4/x/pairing/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResponseConflict struct {
	ConflictRelayData0 *ConflictRelayData `protobuf:"bytes,1,opt,name=conflictRelayData0,proto3" json:"conflictRelayData0,omitempty"`
	ConflictRelayData1 *ConflictRelayData `protobuf:"bytes,2,opt,name=conflictRelayData1,proto3" json:"conflictRelayData1,omitempty"`
}

func (m *ResponseConflict) Reset()         { *m = ResponseConflict{} }
func (m *ResponseConflict) String() string { return proto.CompactTextString(m) }
func (*ResponseConflict) ProtoMessage()    {}
func (*ResponseConflict) Descriptor() ([]byte, []int) {
	return fileDescriptor_db493e54bcd78171, []int{0}
}
func (m *ResponseConflict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseConflict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseConflict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseConflict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseConflict.Merge(m, src)
}
func (m *ResponseConflict) XXX_Size() int {
	return m.Size()
}
func (m *ResponseConflict) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseConflict.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseConflict proto.InternalMessageInfo

func (m *ResponseConflict) GetConflictRelayData0() *ConflictRelayData {
	if m != nil {
		return m.ConflictRelayData0
	}
	return nil
}

func (m *ResponseConflict) GetConflictRelayData1() *ConflictRelayData {
	if m != nil {
		return m.ConflictRelayData1
	}
	return nil
}

type ConflictRelayData struct {
	Request *types.RelayRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Reply   *ReplyMetadata      `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (m *ConflictRelayData) Reset()         { *m = ConflictRelayData{} }
func (m *ConflictRelayData) String() string { return proto.CompactTextString(m) }
func (*ConflictRelayData) ProtoMessage()    {}
func (*ConflictRelayData) Descriptor() ([]byte, []int) {
	return fileDescriptor_db493e54bcd78171, []int{1}
}
func (m *ConflictRelayData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConflictRelayData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConflictRelayData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConflictRelayData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConflictRelayData.Merge(m, src)
}
func (m *ConflictRelayData) XXX_Size() int {
	return m.Size()
}
func (m *ConflictRelayData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConflictRelayData.DiscardUnknown(m)
}

var xxx_messageInfo_ConflictRelayData proto.InternalMessageInfo

func (m *ConflictRelayData) GetRequest() *types.RelayRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ConflictRelayData) GetReply() *ReplyMetadata {
	if m != nil {
		return m.Reply
	}
	return nil
}

type ReplyMetadata struct {
	HashAllDataHash       []byte `protobuf:"bytes,1,opt,name=hash_all_data_hash,json=hashAllDataHash,proto3" json:"hash_all_data_hash,omitempty"`
	Sig                   []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	LatestBlock           int64  `protobuf:"varint,3,opt,name=latest_block,json=latestBlock,proto3" json:"latest_block,omitempty"`
	FinalizedBlocksHashes []byte `protobuf:"bytes,4,opt,name=finalized_blocks_hashes,json=finalizedBlocksHashes,proto3" json:"finalized_blocks_hashes,omitempty"`
	SigBlocks             []byte `protobuf:"bytes,5,opt,name=sig_blocks,json=sigBlocks,proto3" json:"sig_blocks,omitempty"`
}

func (m *ReplyMetadata) Reset()         { *m = ReplyMetadata{} }
func (m *ReplyMetadata) String() string { return proto.CompactTextString(m) }
func (*ReplyMetadata) ProtoMessage()    {}
func (*ReplyMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_db493e54bcd78171, []int{2}
}
func (m *ReplyMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMetadata.Merge(m, src)
}
func (m *ReplyMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ReplyMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMetadata proto.InternalMessageInfo

func (m *ReplyMetadata) GetHashAllDataHash() []byte {
	if m != nil {
		return m.HashAllDataHash
	}
	return nil
}

func (m *ReplyMetadata) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *ReplyMetadata) GetLatestBlock() int64 {
	if m != nil {
		return m.LatestBlock
	}
	return 0
}

func (m *ReplyMetadata) GetFinalizedBlocksHashes() []byte {
	if m != nil {
		return m.FinalizedBlocksHashes
	}
	return nil
}

func (m *ReplyMetadata) GetSigBlocks() []byte {
	if m != nil {
		return m.SigBlocks
	}
	return nil
}

type FinalizationConflict struct {
	RelayFinalization_0 *RelayFinalization `protobuf:"bytes,1,opt,name=relay_finalization_0,json=relayFinalization0,proto3" json:"relay_finalization_0,omitempty"`
	RelayFinalization_1 *RelayFinalization `protobuf:"bytes,2,opt,name=relay_finalization_1,json=relayFinalization1,proto3" json:"relay_finalization_1,omitempty"`
}

func (m *FinalizationConflict) Reset()         { *m = FinalizationConflict{} }
func (m *FinalizationConflict) String() string { return proto.CompactTextString(m) }
func (*FinalizationConflict) ProtoMessage()    {}
func (*FinalizationConflict) Descriptor() ([]byte, []int) {
	return fileDescriptor_db493e54bcd78171, []int{3}
}
func (m *FinalizationConflict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizationConflict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizationConflict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizationConflict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizationConflict.Merge(m, src)
}
func (m *FinalizationConflict) XXX_Size() int {
	return m.Size()
}
func (m *FinalizationConflict) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizationConflict.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizationConflict proto.InternalMessageInfo

func (m *FinalizationConflict) GetRelayFinalization_0() *RelayFinalization {
	if m != nil {
		return m.RelayFinalization_0
	}
	return nil
}

func (m *FinalizationConflict) GetRelayFinalization_1() *RelayFinalization {
	if m != nil {
		return m.RelayFinalization_1
	}
	return nil
}

type RelayFinalization struct {
	FinalizedBlocksHashes []byte              `protobuf:"bytes,1,opt,name=finalized_blocks_hashes,json=finalizedBlocksHashes,proto3" json:"finalized_blocks_hashes,omitempty"`
	LatestBlock           int64               `protobuf:"varint,2,opt,name=latest_block,json=latestBlock,proto3" json:"latest_block,omitempty"`
	ConsumerAddress       string              `protobuf:"bytes,3,opt,name=consumer_address,json=consumerAddress,proto3" json:"consumer_address,omitempty"`
	RelaySession          *types.RelaySession `protobuf:"bytes,4,opt,name=relay_session,json=relaySession,proto3" json:"relay_session,omitempty"`
	SigBlocks             []byte              `protobuf:"bytes,5,opt,name=sig_blocks,json=sigBlocks,proto3" json:"sig_blocks,omitempty"`
}

func (m *RelayFinalization) Reset()         { *m = RelayFinalization{} }
func (m *RelayFinalization) String() string { return proto.CompactTextString(m) }
func (*RelayFinalization) ProtoMessage()    {}
func (*RelayFinalization) Descriptor() ([]byte, []int) {
	return fileDescriptor_db493e54bcd78171, []int{4}
}
func (m *RelayFinalization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayFinalization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayFinalization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayFinalization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayFinalization.Merge(m, src)
}
func (m *RelayFinalization) XXX_Size() int {
	return m.Size()
}
func (m *RelayFinalization) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayFinalization.DiscardUnknown(m)
}

var xxx_messageInfo_RelayFinalization proto.InternalMessageInfo

func (m *RelayFinalization) GetFinalizedBlocksHashes() []byte {
	if m != nil {
		return m.FinalizedBlocksHashes
	}
	return nil
}

func (m *RelayFinalization) GetLatestBlock() int64 {
	if m != nil {
		return m.LatestBlock
	}
	return 0
}

func (m *RelayFinalization) GetConsumerAddress() string {
	if m != nil {
		return m.ConsumerAddress
	}
	return ""
}

func (m *RelayFinalization) GetRelaySession() *types.RelaySession {
	if m != nil {
		return m.RelaySession
	}
	return nil
}

func (m *RelayFinalization) GetSigBlocks() []byte {
	if m != nil {
		return m.SigBlocks
	}
	return nil
}

func init() {
	proto.RegisterType((*ResponseConflict)(nil), "lavanet.lava.conflict.ResponseConflict")
	proto.RegisterType((*ConflictRelayData)(nil), "lavanet.lava.conflict.ConflictRelayData")
	proto.RegisterType((*ReplyMetadata)(nil), "lavanet.lava.conflict.ReplyMetadata")
	proto.RegisterType((*FinalizationConflict)(nil), "lavanet.lava.conflict.FinalizationConflict")
	proto.RegisterType((*RelayFinalization)(nil), "lavanet.lava.conflict.RelayFinalization")
}

func init() {
	proto.RegisterFile("lavanet/lava/conflict/conflict_data.proto", fileDescriptor_db493e54bcd78171)
}

var fileDescriptor_db493e54bcd78171 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x8d, 0x93, 0x16, 0xa8, 0x9b, 0xaa, 0xa9, 0x95, 0x8a, 0xa8, 0x12, 0xab, 0xb2, 0xe2, 0xd0,
	0xaa, 0xd2, 0x6e, 0x03, 0x88, 0x03, 0xe2, 0xd2, 0x96, 0x8f, 0x0a, 0x89, 0x8b, 0xb9, 0xa0, 0x5e,
	0x56, 0xce, 0xc6, 0xd9, 0x58, 0xb8, 0xeb, 0x65, 0xc7, 0xa9, 0x08, 0x37, 0xfe, 0x01, 0x12, 0xff,
	0x09, 0xf5, 0x84, 0x7a, 0xe4, 0x88, 0x92, 0x3f, 0x82, 0x6c, 0x6f, 0x42, 0xbe, 0x9a, 0x20, 0x71,
	0xda, 0xf1, 0xcc, 0x7b, 0xcf, 0xb3, 0xf3, 0x46, 0xc6, 0x87, 0x92, 0x5d, 0xb1, 0x94, 0xeb, 0xd0,
	0x7c, 0xc3, 0x58, 0xa5, 0x1d, 0x29, 0x62, 0x3d, 0x0e, 0xa2, 0x36, 0xd3, 0x2c, 0xc8, 0x72, 0xa5,
	0x15, 0xd9, 0x2d, 0xa0, 0x81, 0xf9, 0x06, 0x23, 0xc4, 0x5e, 0x3d, 0x51, 0x89, 0xb2, 0x88, 0xd0,
	0x44, 0x0e, 0xbc, 0xb7, 0x3f, 0xa5, 0x9b, 0x31, 0x91, 0x8b, 0x34, 0x09, 0x73, 0x2e, 0x59, 0xdf,
	0x21, 0xfc, 0x1f, 0x08, 0xd7, 0x28, 0x87, 0x4c, 0xa5, 0xc0, 0xcf, 0x0a, 0x31, 0xf2, 0x01, 0x93,
	0x91, 0x30, 0x35, 0xd8, 0x97, 0x4c, 0xb3, 0xe3, 0x06, 0xda, 0x47, 0x07, 0x9b, 0x8f, 0x0f, 0x82,
	0x85, 0x0d, 0x04, 0x67, 0xb3, 0x04, 0xba, 0x40, 0x63, 0xa1, 0x72, 0xb3, 0x51, 0xfe, 0x6f, 0xe5,
	0xa6, 0xff, 0x1d, 0xe1, 0x9d, 0x39, 0x24, 0x79, 0x81, 0xef, 0xe6, 0xfc, 0x53, 0x8f, 0x83, 0x2e,
	0xda, 0xf7, 0xa7, 0x2f, 0x29, 0x46, 0x12, 0x58, 0x06, 0x75, 0x48, 0x3a, 0xa2, 0x90, 0xe7, 0x78,
	0x3d, 0xe7, 0x99, 0xec, 0x37, 0x2a, 0x96, 0xfb, 0xe8, 0x96, 0x06, 0xa9, 0xc1, 0xbc, 0xe3, 0x9a,
	0x19, 0x9b, 0xa8, 0xa3, 0xbc, 0x5d, 0xbb, 0x57, 0xae, 0x55, 0xfc, 0x6b, 0x84, 0xb7, 0xa6, 0xca,
	0xe4, 0x08, 0x93, 0x2e, 0x83, 0x6e, 0xc4, 0xa4, 0xb4, 0xb6, 0x46, 0xe6, 0x64, 0x9b, 0xab, 0xd2,
	0x6d, 0x13, 0x9f, 0x48, 0x69, 0x5a, 0x3f, 0x67, 0xd0, 0x25, 0x35, 0x5c, 0x01, 0x91, 0xd8, 0xf9,
	0x54, 0xa9, 0x09, 0xc9, 0x43, 0x5c, 0x95, 0x4c, 0x73, 0xd0, 0x51, 0x4b, 0xaa, 0xf8, 0xa3, 0xed,
	0xac, 0x42, 0x37, 0x5d, 0xee, 0xd4, 0xa4, 0xc8, 0x33, 0x7c, 0xbf, 0x23, 0x52, 0x26, 0xc5, 0x17,
	0xde, 0x76, 0x28, 0xb0, 0x97, 0x70, 0x68, 0xac, 0x59, 0xa1, 0xdd, 0x71, 0xd9, 0x12, 0xe0, 0xdc,
	0x16, 0xc9, 0x03, 0x8c, 0x41, 0x24, 0x05, 0xa3, 0xb1, 0x6e, 0xa1, 0x1b, 0x20, 0x12, 0x07, 0xf2,
	0x7f, 0x22, 0x5c, 0x7f, 0xed, 0x88, 0x4c, 0x0b, 0x95, 0x8e, 0xb7, 0xe5, 0x02, 0xd7, 0xed, 0x46,
	0x45, 0x9d, 0x89, 0x6a, 0xb4, 0x6a, 0x5f, 0xec, 0xc4, 0x27, 0xf5, 0x28, 0xc9, 0x67, 0x53, 0xc7,
	0xb7, 0x68, 0xaf, 0xda, 0x98, 0x7f, 0xd1, 0x6e, 0xfa, 0x5f, 0xcb, 0x78, 0x67, 0x0e, 0xb9, 0x6c,
	0x7a, 0x68, 0xd9, 0xf4, 0x66, 0x8d, 0x29, 0xcf, 0x1b, 0x73, 0x88, 0x6b, 0xb1, 0x4a, 0xa1, 0x77,
	0xc9, 0xf3, 0x88, 0xb5, 0xdb, 0x39, 0x07, 0xb0, 0xfe, 0x6d, 0xd0, 0xed, 0x51, 0xfe, 0xc4, 0xa5,
	0xc9, 0x1b, 0xbc, 0xe5, 0xfe, 0x1b, 0x38, 0x80, 0x50, 0xa9, 0x75, 0x6e, 0xf9, 0xf6, 0xbe, 0x77,
	0x48, 0x5a, 0xcd, 0x27, 0x4e, 0x2b, 0x4c, 0x3d, 0x7d, 0x75, 0x3d, 0xf0, 0xd0, 0xcd, 0xc0, 0x43,
	0xbf, 0x07, 0x1e, 0xfa, 0x36, 0xf4, 0x4a, 0x37, 0x43, 0xaf, 0xf4, 0x6b, 0xe8, 0x95, 0x2e, 0x8e,
	0x12, 0xa1, 0xbb, 0xbd, 0x56, 0x10, 0xab, 0xcb, 0x70, 0xea, 0x15, 0xb9, 0x7a, 0x1a, 0x7e, 0xfe,
	0xfb, 0x44, 0xe9, 0x7e, 0xc6, 0xa1, 0x75, 0xc7, 0x3e, 0x26, 0x4f, 0xfe, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xbe, 0x9b, 0x23, 0x33, 0xc8, 0x04, 0x00, 0x00,
}

func (m *ResponseConflict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseConflict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseConflict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConflictRelayData1 != nil {
		{
			size, err := m.ConflictRelayData1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConflictRelayData0 != nil {
		{
			size, err := m.ConflictRelayData0.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConflictRelayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConflictRelayData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConflictRelayData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigBlocks) > 0 {
		i -= len(m.SigBlocks)
		copy(dAtA[i:], m.SigBlocks)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.SigBlocks)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FinalizedBlocksHashes) > 0 {
		i -= len(m.FinalizedBlocksHashes)
		copy(dAtA[i:], m.FinalizedBlocksHashes)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.FinalizedBlocksHashes)))
		i--
		dAtA[i] = 0x22
	}
	if m.LatestBlock != 0 {
		i = encodeVarintConflictData(dAtA, i, uint64(m.LatestBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HashAllDataHash) > 0 {
		i -= len(m.HashAllDataHash)
		copy(dAtA[i:], m.HashAllDataHash)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.HashAllDataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalizationConflict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizationConflict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizationConflict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelayFinalization_1 != nil {
		{
			size, err := m.RelayFinalization_1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RelayFinalization_0 != nil {
		{
			size, err := m.RelayFinalization_0.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayFinalization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayFinalization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayFinalization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigBlocks) > 0 {
		i -= len(m.SigBlocks)
		copy(dAtA[i:], m.SigBlocks)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.SigBlocks)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RelaySession != nil {
		{
			size, err := m.RelaySession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConflictData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConsumerAddress) > 0 {
		i -= len(m.ConsumerAddress)
		copy(dAtA[i:], m.ConsumerAddress)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.ConsumerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestBlock != 0 {
		i = encodeVarintConflictData(dAtA, i, uint64(m.LatestBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FinalizedBlocksHashes) > 0 {
		i -= len(m.FinalizedBlocksHashes)
		copy(dAtA[i:], m.FinalizedBlocksHashes)
		i = encodeVarintConflictData(dAtA, i, uint64(len(m.FinalizedBlocksHashes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConflictData(dAtA []byte, offset int, v uint64) int {
	offset -= sovConflictData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResponseConflict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConflictRelayData0 != nil {
		l = m.ConflictRelayData0.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	if m.ConflictRelayData1 != nil {
		l = m.ConflictRelayData1.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	return n
}

func (m *ConflictRelayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	return n
}

func (m *ReplyMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashAllDataHash)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	if m.LatestBlock != 0 {
		n += 1 + sovConflictData(uint64(m.LatestBlock))
	}
	l = len(m.FinalizedBlocksHashes)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	l = len(m.SigBlocks)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	return n
}

func (m *FinalizationConflict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayFinalization_0 != nil {
		l = m.RelayFinalization_0.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	if m.RelayFinalization_1 != nil {
		l = m.RelayFinalization_1.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	return n
}

func (m *RelayFinalization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FinalizedBlocksHashes)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	if m.LatestBlock != 0 {
		n += 1 + sovConflictData(uint64(m.LatestBlock))
	}
	l = len(m.ConsumerAddress)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	if m.RelaySession != nil {
		l = m.RelaySession.Size()
		n += 1 + l + sovConflictData(uint64(l))
	}
	l = len(m.SigBlocks)
	if l > 0 {
		n += 1 + l + sovConflictData(uint64(l))
	}
	return n
}

func sovConflictData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConflictData(x uint64) (n int) {
	return sovConflictData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResponseConflict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConflictData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseConflict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseConflict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictRelayData0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConflictRelayData0 == nil {
				m.ConflictRelayData0 = &ConflictRelayData{}
			}
			if err := m.ConflictRelayData0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictRelayData1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConflictRelayData1 == nil {
				m.ConflictRelayData1 = &ConflictRelayData{}
			}
			if err := m.ConflictRelayData1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConflictData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConflictData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConflictRelayData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConflictData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConflictRelayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConflictRelayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.RelayRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reply == nil {
				m.Reply = &ReplyMetadata{}
			}
			if err := m.Reply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConflictData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConflictData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConflictData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashAllDataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashAllDataHash = append(m.HashAllDataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HashAllDataHash == nil {
				m.HashAllDataHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlock", wireType)
			}
			m.LatestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedBlocksHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedBlocksHashes = append(m.FinalizedBlocksHashes[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedBlocksHashes == nil {
				m.FinalizedBlocksHashes = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBlocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigBlocks = append(m.SigBlocks[:0], dAtA[iNdEx:postIndex]...)
			if m.SigBlocks == nil {
				m.SigBlocks = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConflictData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConflictData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalizationConflict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConflictData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizationConflict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizationConflict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFinalization_0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayFinalization_0 == nil {
				m.RelayFinalization_0 = &RelayFinalization{}
			}
			if err := m.RelayFinalization_0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFinalization_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayFinalization_1 == nil {
				m.RelayFinalization_1 = &RelayFinalization{}
			}
			if err := m.RelayFinalization_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConflictData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConflictData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayFinalization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConflictData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayFinalization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayFinalization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedBlocksHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedBlocksHashes = append(m.FinalizedBlocksHashes[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedBlocksHashes == nil {
				m.FinalizedBlocksHashes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlock", wireType)
			}
			m.LatestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelaySession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelaySession == nil {
				m.RelaySession = &types.RelaySession{}
			}
			if err := m.RelaySession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBlocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConflictData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConflictData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigBlocks = append(m.SigBlocks[:0], dAtA[iNdEx:postIndex]...)
			if m.SigBlocks == nil {
				m.SigBlocks = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConflictData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConflictData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConflictData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConflictData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConflictData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConflictData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConflictData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConflictData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConflictData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConflictData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConflictData = fmt.Errorf("proto: unexpected end of group")
)
