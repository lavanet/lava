// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/timerstore/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAllTimersRequest struct {
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *QueryAllTimersRequest) Reset()         { *m = QueryAllTimersRequest{} }
func (m *QueryAllTimersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimersRequest) ProtoMessage()    {}
func (*QueryAllTimersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{0}
}
func (m *QueryAllTimersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimersRequest.Merge(m, src)
}
func (m *QueryAllTimersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimersRequest proto.InternalMessageInfo

func (m *QueryAllTimersRequest) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *QueryAllTimersRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type TimerInfo struct {
	// Types that are valid to be assigned to Block:
	//	*TimerInfo_BlockTime
	//	*TimerInfo_BlockHeight
	Block isTimerInfo_Block `protobuf_oneof:"block"`
	Key   string            `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Data  []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TimerInfo) Reset()         { *m = TimerInfo{} }
func (m *TimerInfo) String() string { return proto.CompactTextString(m) }
func (*TimerInfo) ProtoMessage()    {}
func (*TimerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{1}
}
func (m *TimerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerInfo.Merge(m, src)
}
func (m *TimerInfo) XXX_Size() int {
	return m.Size()
}
func (m *TimerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimerInfo proto.InternalMessageInfo

type isTimerInfo_Block interface {
	isTimerInfo_Block()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TimerInfo_BlockTime struct {
	BlockTime string `protobuf:"bytes,1,opt,name=blockTime,proto3,oneof" json:"blockTime,omitempty"`
}
type TimerInfo_BlockHeight struct {
	BlockHeight uint64 `protobuf:"varint,2,opt,name=blockHeight,proto3,oneof" json:"blockHeight,omitempty"`
}

func (*TimerInfo_BlockTime) isTimerInfo_Block()   {}
func (*TimerInfo_BlockHeight) isTimerInfo_Block() {}

func (m *TimerInfo) GetBlock() isTimerInfo_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *TimerInfo) GetBlockTime() string {
	if x, ok := m.GetBlock().(*TimerInfo_BlockTime); ok {
		return x.BlockTime
	}
	return ""
}

func (m *TimerInfo) GetBlockHeight() uint64 {
	if x, ok := m.GetBlock().(*TimerInfo_BlockHeight); ok {
		return x.BlockHeight
	}
	return 0
}

func (m *TimerInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TimerInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TimerInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TimerInfo_BlockTime)(nil),
		(*TimerInfo_BlockHeight)(nil),
	}
}

type QueryAllTimersResponse struct {
	BlockTimeTimers   []*TimerInfo `protobuf:"bytes,1,rep,name=blockTimeTimers,proto3" json:"blockTimeTimers,omitempty"`
	BlockHeightTimers []*TimerInfo `protobuf:"bytes,2,rep,name=blockHeightTimers,proto3" json:"blockHeightTimers,omitempty"`
	Tick              string       `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (m *QueryAllTimersResponse) Reset()         { *m = QueryAllTimersResponse{} }
func (m *QueryAllTimersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimersResponse) ProtoMessage()    {}
func (*QueryAllTimersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{2}
}
func (m *QueryAllTimersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimersResponse.Merge(m, src)
}
func (m *QueryAllTimersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimersResponse proto.InternalMessageInfo

func (m *QueryAllTimersResponse) GetBlockTimeTimers() []*TimerInfo {
	if m != nil {
		return m.BlockTimeTimers
	}
	return nil
}

func (m *QueryAllTimersResponse) GetBlockHeightTimers() []*TimerInfo {
	if m != nil {
		return m.BlockHeightTimers
	}
	return nil
}

func (m *QueryAllTimersResponse) GetTick() string {
	if m != nil {
		return m.Tick
	}
	return ""
}

type QueryStoreKeysRequest struct {
}

func (m *QueryStoreKeysRequest) Reset()         { *m = QueryStoreKeysRequest{} }
func (m *QueryStoreKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStoreKeysRequest) ProtoMessage()    {}
func (*QueryStoreKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{3}
}
func (m *QueryStoreKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoreKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoreKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoreKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoreKeysRequest.Merge(m, src)
}
func (m *QueryStoreKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoreKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoreKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoreKeysRequest proto.InternalMessageInfo

type StoreKeyAndPrefix struct {
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *StoreKeyAndPrefix) Reset()         { *m = StoreKeyAndPrefix{} }
func (m *StoreKeyAndPrefix) String() string { return proto.CompactTextString(m) }
func (*StoreKeyAndPrefix) ProtoMessage()    {}
func (*StoreKeyAndPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{4}
}
func (m *StoreKeyAndPrefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreKeyAndPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreKeyAndPrefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreKeyAndPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreKeyAndPrefix.Merge(m, src)
}
func (m *StoreKeyAndPrefix) XXX_Size() int {
	return m.Size()
}
func (m *StoreKeyAndPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreKeyAndPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_StoreKeyAndPrefix proto.InternalMessageInfo

func (m *StoreKeyAndPrefix) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *StoreKeyAndPrefix) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type QueryStoreKeysResponse struct {
	Keys []StoreKeyAndPrefix `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
}

func (m *QueryStoreKeysResponse) Reset()         { *m = QueryStoreKeysResponse{} }
func (m *QueryStoreKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStoreKeysResponse) ProtoMessage()    {}
func (*QueryStoreKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{5}
}
func (m *QueryStoreKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStoreKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStoreKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStoreKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStoreKeysResponse.Merge(m, src)
}
func (m *QueryStoreKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStoreKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStoreKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStoreKeysResponse proto.InternalMessageInfo

func (m *QueryStoreKeysResponse) GetKeys() []StoreKeyAndPrefix {
	if m != nil {
		return m.Keys
	}
	return nil
}

type QueryNextRequest struct {
	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *QueryNextRequest) Reset()         { *m = QueryNextRequest{} }
func (m *QueryNextRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextRequest) ProtoMessage()    {}
func (*QueryNextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{6}
}
func (m *QueryNextRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextRequest.Merge(m, src)
}
func (m *QueryNextRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextRequest proto.InternalMessageInfo

func (m *QueryNextRequest) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *QueryNextRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type QueryNextResponse struct {
	NextBlockHeight uint64 `protobuf:"varint,1,opt,name=nextBlockHeight,proto3" json:"nextBlockHeight,omitempty"`
	NextBlockTime   string `protobuf:"bytes,2,opt,name=nextBlockTime,proto3" json:"nextBlockTime,omitempty"`
	Tick            string `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (m *QueryNextResponse) Reset()         { *m = QueryNextResponse{} }
func (m *QueryNextResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextResponse) ProtoMessage()    {}
func (*QueryNextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67348a2ef655ad3f, []int{7}
}
func (m *QueryNextResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextResponse.Merge(m, src)
}
func (m *QueryNextResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextResponse proto.InternalMessageInfo

func (m *QueryNextResponse) GetNextBlockHeight() uint64 {
	if m != nil {
		return m.NextBlockHeight
	}
	return 0
}

func (m *QueryNextResponse) GetNextBlockTime() string {
	if m != nil {
		return m.NextBlockTime
	}
	return ""
}

func (m *QueryNextResponse) GetTick() string {
	if m != nil {
		return m.Tick
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryAllTimersRequest)(nil), "lavanet.lava.timerstore.QueryAllTimersRequest")
	proto.RegisterType((*TimerInfo)(nil), "lavanet.lava.timerstore.TimerInfo")
	proto.RegisterType((*QueryAllTimersResponse)(nil), "lavanet.lava.timerstore.QueryAllTimersResponse")
	proto.RegisterType((*QueryStoreKeysRequest)(nil), "lavanet.lava.timerstore.QueryStoreKeysRequest")
	proto.RegisterType((*StoreKeyAndPrefix)(nil), "lavanet.lava.timerstore.StoreKeyAndPrefix")
	proto.RegisterType((*QueryStoreKeysResponse)(nil), "lavanet.lava.timerstore.QueryStoreKeysResponse")
	proto.RegisterType((*QueryNextRequest)(nil), "lavanet.lava.timerstore.QueryNextRequest")
	proto.RegisterType((*QueryNextResponse)(nil), "lavanet.lava.timerstore.QueryNextResponse")
}

func init() {
	proto.RegisterFile("lavanet/lava/timerstore/query.proto", fileDescriptor_67348a2ef655ad3f)
}

var fileDescriptor_67348a2ef655ad3f = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x13, 0xb7, 0xe0, 0x29, 0xa8, 0xcd, 0x0a, 0xda, 0x28, 0x20, 0x13, 0xb9, 0x20, 0x85,
	0x22, 0xbc, 0x52, 0xca, 0x01, 0xf5, 0x44, 0x23, 0xa4, 0x06, 0x51, 0xa1, 0x62, 0x38, 0x71, 0xa0,
	0x72, 0xd2, 0xad, 0x6b, 0xc5, 0xf5, 0xa6, 0xf1, 0xa6, 0xc4, 0xaa, 0xca, 0x81, 0x27, 0x40, 0xe2,
	0xc4, 0x4b, 0xf0, 0x1c, 0x3d, 0x70, 0xa8, 0xc4, 0x85, 0x13, 0x42, 0x09, 0x0f, 0xc0, 0x23, 0xa0,
	0x5d, 0x6f, 0x5c, 0xe7, 0xc7, 0x34, 0x82, 0x93, 0xc7, 0xb3, 0xdf, 0x7e, 0xf3, 0xcd, 0x37, 0x63,
	0xc3, 0xaa, 0xef, 0x1c, 0x3b, 0x01, 0x61, 0x98, 0x3f, 0x31, 0xf3, 0x0e, 0x49, 0x27, 0x64, 0xb4,
	0x43, 0xf0, 0x51, 0x97, 0x74, 0x22, 0xab, 0xdd, 0xa1, 0x8c, 0xa2, 0x15, 0x09, 0xb2, 0xf8, 0xd3,
	0xba, 0x00, 0x95, 0x6e, 0xb8, 0xd4, 0xa5, 0x02, 0x83, 0x79, 0x14, 0xc3, 0x4b, 0xb7, 0x5d, 0x4a,
	0x5d, 0x9f, 0x60, 0xa7, 0xed, 0x61, 0x27, 0x08, 0x28, 0x73, 0x98, 0x47, 0x83, 0x50, 0x9e, 0x66,
	0x56, 0x14, 0x61, 0x0c, 0x32, 0xb7, 0xe1, 0xe6, 0x4b, 0x2e, 0x60, 0xd3, 0xf7, 0x5f, 0x0b, 0x84,
	0x4d, 0x8e, 0xba, 0x24, 0x64, 0xe8, 0x16, 0xe8, 0x02, 0xbd, 0xdb, 0x22, 0x51, 0x51, 0x2d, 0xab,
	0x15, 0xdd, 0xbe, 0x2a, 0x12, 0xcf, 0x49, 0x84, 0x96, 0x61, 0xbe, 0xdd, 0x21, 0xfb, 0x5e, 0xaf,
	0x98, 0x13, 0x27, 0xf2, 0xcd, 0x7c, 0x0f, 0xba, 0x60, 0x79, 0x16, 0xec, 0x53, 0x64, 0x80, 0xde,
	0xf0, 0x69, 0xb3, 0xc5, 0x33, 0x31, 0x43, 0x5d, 0xb1, 0x2f, 0x52, 0xc8, 0x84, 0x05, 0xf1, 0x52,
	0x27, 0x9e, 0x7b, 0xc0, 0x04, 0x93, 0x56, 0x57, 0xec, 0x74, 0x12, 0x2d, 0x41, 0x9e, 0xd7, 0xcf,
	0x8b, 0x2a, 0x3c, 0x44, 0x08, 0xb4, 0x3d, 0x87, 0x39, 0x45, 0xad, 0xac, 0x56, 0xae, 0xd9, 0x22,
	0xae, 0x5d, 0x81, 0x39, 0x71, 0xc9, 0xfc, 0xaa, 0xc2, 0xf2, 0x78, 0x3b, 0x61, 0x9b, 0x06, 0x21,
	0x41, 0xdb, 0xb0, 0x98, 0x94, 0x8e, 0x8f, 0x8a, 0x6a, 0x39, 0x5f, 0x59, 0xa8, 0x9a, 0x56, 0x86,
	0xe9, 0x56, 0xd2, 0x8a, 0x3d, 0x7e, 0x15, 0xed, 0x40, 0x21, 0x25, 0x53, 0xf2, 0xe5, 0x66, 0xe6,
	0x9b, 0xbc, 0xcc, 0xfb, 0x62, 0x5e, 0xb3, 0x25, 0x5b, 0x15, 0xb1, 0xb9, 0x22, 0x87, 0xf3, 0x4a,
	0xfa, 0x3e, 0x1c, 0x8e, 0x59, 0x87, 0xc2, 0x30, 0xb7, 0x19, 0xec, 0xed, 0x08, 0xf3, 0xff, 0x6d,
	0x62, 0x6f, 0xa5, 0x61, 0xa9, 0x12, 0xd2, 0xb0, 0xa7, 0xa0, 0xb5, 0x48, 0x34, 0x74, 0x69, 0x2d,
	0xb3, 0xab, 0x09, 0x21, 0x35, 0xed, 0xec, 0xc7, 0x1d, 0xc5, 0x16, 0xb7, 0xcd, 0x2d, 0x58, 0x12,
	0xfc, 0x2f, 0x48, 0x8f, 0xfd, 0xd7, 0x6a, 0xbd, 0x83, 0x42, 0x8a, 0x48, 0x6a, 0xac, 0xc0, 0x62,
	0x40, 0x7a, 0xac, 0x96, 0x5a, 0x23, 0xce, 0xa7, 0xd9, 0xe3, 0x69, 0x74, 0x17, 0xae, 0x27, 0x29,
	0xb1, 0x90, 0x31, 0xfb, 0x68, 0x72, 0xda, 0x10, 0xaa, 0xbf, 0xf3, 0x30, 0x27, 0x2a, 0xa3, 0x2f,
	0x2a, 0xe8, 0xc9, 0x62, 0x21, 0x2b, 0xd3, 0x91, 0xa9, 0x1f, 0x54, 0x09, 0xcf, 0x8c, 0x8f, 0x9b,
	0x33, 0x9f, 0x7c, 0xf8, 0xf6, 0xeb, 0x53, 0x6e, 0x03, 0x3d, 0xc6, 0x59, 0x1f, 0xb2, 0xe3, 0xfb,
	0xbb, 0xf1, 0x2b, 0x3e, 0x49, 0x1c, 0x3d, 0xc5, 0x27, 0xb1, 0x65, 0xa7, 0xe8, 0xb3, 0x0a, 0x7a,
	0x32, 0xd8, 0xcb, 0x04, 0x8f, 0x2f, 0xd9, 0x65, 0x82, 0x27, 0x36, 0xc6, 0x7c, 0x20, 0x04, 0xdf,
	0x43, 0xab, 0x99, 0x82, 0x13, 0x91, 0x21, 0xd7, 0xa6, 0xf1, 0x59, 0xa2, 0xfb, 0x7f, 0x2f, 0x93,
	0x5a, 0x9c, 0xd2, 0xda, 0x2c, 0x50, 0x29, 0x66, 0x43, 0x88, 0x79, 0x84, 0xaa, 0x99, 0x62, 0xf8,
	0xe8, 0xa7, 0xfa, 0x56, 0xdb, 0x3a, 0xeb, 0x1b, 0xea, 0x79, 0xdf, 0x50, 0x7f, 0xf6, 0x0d, 0xf5,
	0xe3, 0xc0, 0x50, 0xce, 0x07, 0x86, 0xf2, 0x7d, 0x60, 0x28, 0x6f, 0x1e, 0xba, 0x1e, 0x3b, 0xe8,
	0x36, 0xac, 0x26, 0x3d, 0x1c, 0xe5, 0x3d, 0x5e, 0xc7, 0xbd, 0x91, 0x7f, 0x6c, 0xd4, 0x26, 0x61,
	0x63, 0x5e, 0xfc, 0x64, 0xd7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1f, 0xd8, 0xfd, 0xfd,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a timer store for all its timers.
	AllTimers(ctx context.Context, in *QueryAllTimersRequest, opts ...grpc.CallOption) (*QueryAllTimersResponse, error)
	// Queries for all store keys.
	StoreKeys(ctx context.Context, in *QueryStoreKeysRequest, opts ...grpc.CallOption) (*QueryStoreKeysResponse, error)
	// Queries for next timeout of a timer.
	Next(ctx context.Context, in *QueryNextRequest, opts ...grpc.CallOption) (*QueryNextResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AllTimers(ctx context.Context, in *QueryAllTimersRequest, opts ...grpc.CallOption) (*QueryAllTimersResponse, error) {
	out := new(QueryAllTimersResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.timerstore.Query/AllTimers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoreKeys(ctx context.Context, in *QueryStoreKeysRequest, opts ...grpc.CallOption) (*QueryStoreKeysResponse, error) {
	out := new(QueryStoreKeysResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.timerstore.Query/StoreKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Next(ctx context.Context, in *QueryNextRequest, opts ...grpc.CallOption) (*QueryNextResponse, error) {
	out := new(QueryNextResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.timerstore.Query/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a timer store for all its timers.
	AllTimers(context.Context, *QueryAllTimersRequest) (*QueryAllTimersResponse, error)
	// Queries for all store keys.
	StoreKeys(context.Context, *QueryStoreKeysRequest) (*QueryStoreKeysResponse, error)
	// Queries for next timeout of a timer.
	Next(context.Context, *QueryNextRequest) (*QueryNextResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AllTimers(ctx context.Context, req *QueryAllTimersRequest) (*QueryAllTimersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTimers not implemented")
}
func (*UnimplementedQueryServer) StoreKeys(ctx context.Context, req *QueryStoreKeysRequest) (*QueryStoreKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKeys not implemented")
}
func (*UnimplementedQueryServer) Next(ctx context.Context, req *QueryNextRequest) (*QueryNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AllTimers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllTimers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.timerstore.Query/AllTimers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllTimers(ctx, req.(*QueryAllTimersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoreKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStoreKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoreKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.timerstore.Query/StoreKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoreKeys(ctx, req.(*QueryStoreKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.timerstore.Query/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Next(ctx, req.(*QueryNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.timerstore.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllTimers",
			Handler:    _Query_AllTimers_Handler,
		},
		{
			MethodName: "StoreKeys",
			Handler:    _Query_StoreKeys_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _Query_Next_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/timerstore/query.proto",
}

func (m *QueryAllTimersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Block != nil {
		{
			size := m.Block.Size()
			i -= size
			if _, err := m.Block.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TimerInfo_BlockTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerInfo_BlockTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BlockTime)
	copy(dAtA[i:], m.BlockTime)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockTime)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *TimerInfo_BlockHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerInfo_BlockHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryAllTimersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tick) > 0 {
		i -= len(m.Tick)
		copy(dAtA[i:], m.Tick)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tick)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockHeightTimers) > 0 {
		for iNdEx := len(m.BlockHeightTimers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeightTimers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BlockTimeTimers) > 0 {
		for iNdEx := len(m.BlockTimeTimers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockTimeTimers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoreKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoreKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoreKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StoreKeyAndPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreKeyAndPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreKeyAndPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStoreKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStoreKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStoreKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tick) > 0 {
		i -= len(m.Tick)
		copy(dAtA[i:], m.Tick)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tick)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NextBlockTime) > 0 {
		i -= len(m.NextBlockTime)
		copy(dAtA[i:], m.NextBlockTime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NextBlockTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.NextBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllTimersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TimerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		n += m.Block.Size()
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TimerInfo_BlockTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockTime)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *TimerInfo_BlockHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.BlockHeight))
	return n
}
func (m *QueryAllTimersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockTimeTimers) > 0 {
		for _, e := range m.BlockTimeTimers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.BlockHeightTimers) > 0 {
		for _, e := range m.BlockHeightTimers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Tick)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoreKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StoreKeyAndPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStoreKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryNextRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.NextBlockHeight))
	}
	l = len(m.NextBlockTime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Tick)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllTimersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = &TimerInfo_BlockTime{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Block = &TimerInfo_BlockHeight{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeTimers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockTimeTimers = append(m.BlockTimeTimers, &TimerInfo{})
			if err := m.BlockTimeTimers[len(m.BlockTimeTimers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightTimers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeightTimers = append(m.BlockHeightTimers, &TimerInfo{})
			if err := m.BlockHeightTimers[len(m.BlockHeightTimers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoreKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoreKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoreKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreKeyAndPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreKeyAndPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreKeyAndPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStoreKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStoreKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStoreKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, StoreKeyAndPrefix{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBlockHeight", wireType)
			}
			m.NextBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBlockTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextBlockTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
