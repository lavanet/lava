// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/pairing/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/lavanet/lava/v3/x/fixationstore/types"
	types "github.com/lavanet/lava/v3/x/timerstore/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BadgeUsedCu struct {
	BadgeUsedCuKey []byte `protobuf:"bytes,1,opt,name=badge_used_cu_key,json=badgeUsedCuKey,proto3" json:"badge_used_cu_key,omitempty"`
	UsedCu         uint64 `protobuf:"varint,2,opt,name=used_cu,json=usedCu,proto3" json:"used_cu,omitempty"`
}

func (m *BadgeUsedCu) Reset()         { *m = BadgeUsedCu{} }
func (m *BadgeUsedCu) String() string { return proto.CompactTextString(m) }
func (*BadgeUsedCu) ProtoMessage()    {}
func (*BadgeUsedCu) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbd1e49b8b57595b, []int{0}
}
func (m *BadgeUsedCu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeUsedCu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeUsedCu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeUsedCu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeUsedCu.Merge(m, src)
}
func (m *BadgeUsedCu) XXX_Size() int {
	return m.Size()
}
func (m *BadgeUsedCu) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeUsedCu.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeUsedCu proto.InternalMessageInfo

func (m *BadgeUsedCu) GetBadgeUsedCuKey() []byte {
	if m != nil {
		return m.BadgeUsedCuKey
	}
	return nil
}

func (m *BadgeUsedCu) GetUsedCu() uint64 {
	if m != nil {
		return m.UsedCu
	}
	return 0
}

// GenesisState defines the pairing module's genesis state.
type GenesisState struct {
	Params                     Params                             `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	BadgeUsedCuList            []BadgeUsedCu                      `protobuf:"bytes,5,rep,name=badgeUsedCuList,proto3" json:"badgeUsedCuList"`
	BadgesTS                   types.GenesisState                 `protobuf:"bytes,6,opt,name=badgesTS,proto3" json:"badgesTS"`
	ProviderQosFS              types1.GenesisState                `protobuf:"bytes,7,opt,name=providerQosFS,proto3" json:"providerQosFS"`
	UniqueEpochSessions        []UniqueEpochSessionGenesis        `protobuf:"bytes,8,rep,name=unique_epoch_sessions,json=uniqueEpochSessions,proto3" json:"unique_epoch_sessions"`
	ProviderEpochCus           []ProviderEpochCuGenesis           `protobuf:"bytes,9,rep,name=provider_epoch_cus,json=providerEpochCus,proto3" json:"provider_epoch_cus"`
	ProviderEpochComplainedCus []ProviderEpochComplainerCuGenesis `protobuf:"bytes,10,rep,name=provider_epoch_complained_cus,json=providerEpochComplainedCus,proto3" json:"provider_epoch_complained_cus"`
	ProviderConsumerEpochCus   []ProviderConsumerEpochCuGenesis   `protobuf:"bytes,11,rep,name=provider_consumer_epoch_cus,json=providerConsumerEpochCus,proto3" json:"provider_consumer_epoch_cus"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbd1e49b8b57595b, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetBadgeUsedCuList() []BadgeUsedCu {
	if m != nil {
		return m.BadgeUsedCuList
	}
	return nil
}

func (m *GenesisState) GetBadgesTS() types.GenesisState {
	if m != nil {
		return m.BadgesTS
	}
	return types.GenesisState{}
}

func (m *GenesisState) GetProviderQosFS() types1.GenesisState {
	if m != nil {
		return m.ProviderQosFS
	}
	return types1.GenesisState{}
}

func (m *GenesisState) GetUniqueEpochSessions() []UniqueEpochSessionGenesis {
	if m != nil {
		return m.UniqueEpochSessions
	}
	return nil
}

func (m *GenesisState) GetProviderEpochCus() []ProviderEpochCuGenesis {
	if m != nil {
		return m.ProviderEpochCus
	}
	return nil
}

func (m *GenesisState) GetProviderEpochComplainedCus() []ProviderEpochComplainerCuGenesis {
	if m != nil {
		return m.ProviderEpochComplainedCus
	}
	return nil
}

func (m *GenesisState) GetProviderConsumerEpochCus() []ProviderConsumerEpochCuGenesis {
	if m != nil {
		return m.ProviderConsumerEpochCus
	}
	return nil
}

type UniqueEpochSessionGenesis struct {
	Epoch     uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Provider  string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Project   string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	ChainId   string `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SessionId uint64 `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *UniqueEpochSessionGenesis) Reset()         { *m = UniqueEpochSessionGenesis{} }
func (m *UniqueEpochSessionGenesis) String() string { return proto.CompactTextString(m) }
func (*UniqueEpochSessionGenesis) ProtoMessage()    {}
func (*UniqueEpochSessionGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbd1e49b8b57595b, []int{2}
}
func (m *UniqueEpochSessionGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueEpochSessionGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniqueEpochSessionGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniqueEpochSessionGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueEpochSessionGenesis.Merge(m, src)
}
func (m *UniqueEpochSessionGenesis) XXX_Size() int {
	return m.Size()
}
func (m *UniqueEpochSessionGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueEpochSessionGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueEpochSessionGenesis proto.InternalMessageInfo

func (m *UniqueEpochSessionGenesis) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *UniqueEpochSessionGenesis) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *UniqueEpochSessionGenesis) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UniqueEpochSessionGenesis) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UniqueEpochSessionGenesis) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type ProviderEpochCuGenesis struct {
	Epoch           uint64          `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Provider        string          `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	ChainId         string          `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ProviderEpochCu ProviderEpochCu `protobuf:"bytes,4,opt,name=provider_epoch_cu,json=providerEpochCu,proto3" json:"provider_epoch_cu"`
}

func (m *ProviderEpochCuGenesis) Reset()         { *m = ProviderEpochCuGenesis{} }
func (m *ProviderEpochCuGenesis) String() string { return proto.CompactTextString(m) }
func (*ProviderEpochCuGenesis) ProtoMessage()    {}
func (*ProviderEpochCuGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbd1e49b8b57595b, []int{3}
}
func (m *ProviderEpochCuGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderEpochCuGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderEpochCuGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderEpochCuGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderEpochCuGenesis.Merge(m, src)
}
func (m *ProviderEpochCuGenesis) XXX_Size() int {
	return m.Size()
}
func (m *ProviderEpochCuGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderEpochCuGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderEpochCuGenesis proto.InternalMessageInfo

func (m *ProviderEpochCuGenesis) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ProviderEpochCuGenesis) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderEpochCuGenesis) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProviderEpochCuGenesis) GetProviderEpochCu() ProviderEpochCu {
	if m != nil {
		return m.ProviderEpochCu
	}
	return ProviderEpochCu{}
}

type ProviderEpochComplainerCuGenesis struct {
	Epoch                     uint64                    `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Provider                  string                    `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	ChainId                   string                    `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ProviderEpochComplainerCu ProviderEpochComplainerCu `protobuf:"bytes,4,opt,name=provider_epoch_complainer_cu,json=providerEpochComplainerCu,proto3" json:"provider_epoch_complainer_cu"`
}

func (m *ProviderEpochComplainerCuGenesis) Reset()         { *m = ProviderEpochComplainerCuGenesis{} }
func (m *ProviderEpochComplainerCuGenesis) String() string { return proto.CompactTextString(m) }
func (*ProviderEpochComplainerCuGenesis) ProtoMessage()    {}
func (*ProviderEpochComplainerCuGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbd1e49b8b57595b, []int{4}
}
func (m *ProviderEpochComplainerCuGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderEpochComplainerCuGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderEpochComplainerCuGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderEpochComplainerCuGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderEpochComplainerCuGenesis.Merge(m, src)
}
func (m *ProviderEpochComplainerCuGenesis) XXX_Size() int {
	return m.Size()
}
func (m *ProviderEpochComplainerCuGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderEpochComplainerCuGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderEpochComplainerCuGenesis proto.InternalMessageInfo

func (m *ProviderEpochComplainerCuGenesis) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ProviderEpochComplainerCuGenesis) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderEpochComplainerCuGenesis) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProviderEpochComplainerCuGenesis) GetProviderEpochComplainerCu() ProviderEpochComplainerCu {
	if m != nil {
		return m.ProviderEpochComplainerCu
	}
	return ProviderEpochComplainerCu{}
}

type ProviderConsumerEpochCuGenesis struct {
	Epoch                   uint64                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Provider                string                  `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Project                 string                  `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	ChainId                 string                  `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ProviderConsumerEpochCu ProviderConsumerEpochCu `protobuf:"bytes,5,opt,name=provider_consumer_epoch_cu,json=providerConsumerEpochCu,proto3" json:"provider_consumer_epoch_cu"`
}

func (m *ProviderConsumerEpochCuGenesis) Reset()         { *m = ProviderConsumerEpochCuGenesis{} }
func (m *ProviderConsumerEpochCuGenesis) String() string { return proto.CompactTextString(m) }
func (*ProviderConsumerEpochCuGenesis) ProtoMessage()    {}
func (*ProviderConsumerEpochCuGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbd1e49b8b57595b, []int{5}
}
func (m *ProviderConsumerEpochCuGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderConsumerEpochCuGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderConsumerEpochCuGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderConsumerEpochCuGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderConsumerEpochCuGenesis.Merge(m, src)
}
func (m *ProviderConsumerEpochCuGenesis) XXX_Size() int {
	return m.Size()
}
func (m *ProviderConsumerEpochCuGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderConsumerEpochCuGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderConsumerEpochCuGenesis proto.InternalMessageInfo

func (m *ProviderConsumerEpochCuGenesis) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ProviderConsumerEpochCuGenesis) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderConsumerEpochCuGenesis) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ProviderConsumerEpochCuGenesis) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProviderConsumerEpochCuGenesis) GetProviderConsumerEpochCu() ProviderConsumerEpochCu {
	if m != nil {
		return m.ProviderConsumerEpochCu
	}
	return ProviderConsumerEpochCu{}
}

func init() {
	proto.RegisterType((*BadgeUsedCu)(nil), "lavanet.lava.pairing.BadgeUsedCu")
	proto.RegisterType((*GenesisState)(nil), "lavanet.lava.pairing.GenesisState")
	proto.RegisterType((*UniqueEpochSessionGenesis)(nil), "lavanet.lava.pairing.UniqueEpochSessionGenesis")
	proto.RegisterType((*ProviderEpochCuGenesis)(nil), "lavanet.lava.pairing.ProviderEpochCuGenesis")
	proto.RegisterType((*ProviderEpochComplainerCuGenesis)(nil), "lavanet.lava.pairing.ProviderEpochComplainerCuGenesis")
	proto.RegisterType((*ProviderConsumerEpochCuGenesis)(nil), "lavanet.lava.pairing.ProviderConsumerEpochCuGenesis")
}

func init() {
	proto.RegisterFile("lavanet/lava/pairing/genesis.proto", fileDescriptor_dbd1e49b8b57595b)
}

var fileDescriptor_dbd1e49b8b57595b = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x53, 0xd3, 0x4e,
	0x18, 0x6d, 0x68, 0x5a, 0xc2, 0x57, 0x7e, 0x3f, 0xcb, 0x8a, 0x12, 0x2a, 0xc4, 0x12, 0xc7, 0x99,
	0xe2, 0x68, 0x32, 0x03, 0x8e, 0x07, 0x8f, 0xa0, 0x32, 0xa0, 0x07, 0x69, 0x61, 0x9c, 0xf1, 0x12,
	0xd3, 0x64, 0x2d, 0xab, 0x34, 0x59, 0xb3, 0x49, 0x87, 0x9e, 0xfc, 0x17, 0xbc, 0x79, 0xf6, 0x1f,
	0xf1, 0xcc, 0x91, 0xa3, 0x27, 0xc7, 0x81, 0x83, 0x7f, 0x83, 0x37, 0x27, 0x9b, 0x6d, 0x69, 0xda,
	0x04, 0xc5, 0x71, 0x3c, 0x25, 0x9b, 0x7d, 0xdf, 0x7b, 0xdf, 0xcb, 0xbe, 0x6f, 0x16, 0xf4, 0x43,
	0xbb, 0x67, 0x7b, 0x38, 0x34, 0xe3, 0xa7, 0x49, 0x6d, 0x12, 0x10, 0xaf, 0x63, 0x76, 0xb0, 0x87,
	0x19, 0x61, 0x06, 0x0d, 0xfc, 0xd0, 0x47, 0xf3, 0x02, 0x63, 0xc4, 0x4f, 0x43, 0x60, 0x6a, 0xf3,
	0x1d, 0xbf, 0xe3, 0x73, 0x80, 0x19, 0xbf, 0x25, 0xd8, 0xda, 0x4a, 0x26, 0x1f, 0xb5, 0x03, 0xbb,
	0x2b, 0xe8, 0x6a, 0xb7, 0x32, 0x21, 0x98, 0xfa, 0xce, 0x81, 0xe5, 0x44, 0x02, 0xb4, 0x9a, 0x02,
	0xbd, 0x26, 0x47, 0x76, 0x48, 0x7c, 0x8f, 0x85, 0x7e, 0x80, 0x87, 0xab, 0x4c, 0xbe, 0x90, 0x74,
	0x71, 0x90, 0xe0, 0xf8, 0x6b, 0x02, 0xd2, 0x77, 0xa1, 0xb2, 0x61, 0xbb, 0x1d, 0xbc, 0xcf, 0xb0,
	0xbb, 0x19, 0xa1, 0x55, 0x98, 0x6b, 0xc7, 0x4b, 0x2b, 0x62, 0xd8, 0xb5, 0x9c, 0xc8, 0x7a, 0x8b,
	0xfb, 0xaa, 0x54, 0x97, 0x1a, 0xb3, 0xcd, 0xff, 0xdb, 0xe7, 0xb8, 0xa7, 0xb8, 0x8f, 0x16, 0x60,
	0x5a, 0x80, 0xd4, 0xa9, 0xba, 0xd4, 0x90, 0x9b, 0xe5, 0x88, 0xef, 0xe9, 0x1f, 0xcb, 0x30, 0xbb,
	0x95, 0xfc, 0xa8, 0x56, 0x68, 0x87, 0x18, 0x3d, 0x84, 0x72, 0x62, 0x94, 0x33, 0x55, 0xd6, 0x96,
	0x8c, 0xac, 0x1f, 0x67, 0x3c, 0xe7, 0x98, 0x0d, 0xf9, 0xf8, 0xeb, 0xcd, 0x42, 0x53, 0x54, 0xa0,
	0x5d, 0xb8, 0x32, 0xa2, 0xfb, 0x8c, 0xb0, 0x50, 0x2d, 0xd5, 0x8b, 0x8d, 0xca, 0xda, 0x4a, 0x36,
	0xc9, 0x88, 0x19, 0xc1, 0x34, 0x5e, 0x8f, 0xb6, 0x40, 0xe1, 0x9f, 0xd8, 0x5e, 0x4b, 0x2d, 0xf3,
	0x86, 0x6e, 0xa7, 0xb9, 0xce, 0x7f, 0x95, 0x31, 0xea, 0x43, 0xf0, 0x0d, 0x8b, 0xd1, 0x1e, 0xfc,
	0x47, 0x03, 0xbf, 0x47, 0x5c, 0x1c, 0xec, 0xfa, 0xec, 0x49, 0x4b, 0x9d, 0xe6, 0x6c, 0x8d, 0x34,
	0x5b, 0xea, 0x8c, 0xb2, 0x08, 0xd3, 0x24, 0x88, 0xc0, 0xb5, 0xc8, 0x23, 0xef, 0x22, 0x6c, 0x25,
	0x47, 0xcf, 0x30, 0x63, 0x71, 0xb9, 0xaa, 0x70, 0xdf, 0x66, 0xb6, 0xef, 0x7d, 0x5e, 0xf2, 0x38,
	0xae, 0x68, 0x25, 0x05, 0x42, 0x49, 0x88, 0x5c, 0x8d, 0x26, 0x00, 0x0c, 0xbd, 0x02, 0x34, 0xd0,
	0xb6, 0x06, 0x39, 0x63, 0xea, 0x0c, 0xd7, 0xb9, 0x9b, 0x73, 0x48, 0x02, 0xcf, 0x89, 0x36, 0xa3,
	0xb4, 0x48, 0x95, 0xa6, 0x77, 0x19, 0x7a, 0x0f, 0xcb, 0xe3, 0x0a, 0x7e, 0x97, 0x1e, 0xda, 0xc4,
	0xe3, 0xc9, 0x61, 0x2a, 0x70, 0xb1, 0x07, 0xbf, 0x23, 0x36, 0x28, 0x0c, 0xc6, 0x65, 0x6b, 0x34,
	0x13, 0xe7, 0xc6, 0x0d, 0xf4, 0xe1, 0xc6, 0xb0, 0x01, 0xc7, 0xf7, 0x58, 0xd4, 0x4d, 0x79, 0xad,
	0x70, 0xf9, 0xfb, 0x17, 0xcb, 0x6f, 0x8a, 0xba, 0x4c, 0xcf, 0x2a, 0xcd, 0x46, 0xb1, 0x1d, 0x59,
	0x99, 0xaa, 0x16, 0x77, 0x64, 0xa5, 0x58, 0x95, 0x77, 0x64, 0x45, 0xae, 0x96, 0xf4, 0x4f, 0x12,
	0x2c, 0xe6, 0x1e, 0x14, 0x9a, 0x87, 0x12, 0x6f, 0x8c, 0x4f, 0x89, 0xdc, 0x4c, 0x16, 0xa8, 0x06,
	0xca, 0x40, 0x81, 0xcf, 0xd9, 0x4c, 0x73, 0xb8, 0x46, 0x2a, 0x4c, 0xd3, 0xc0, 0x7f, 0x83, 0x9d,
	0x50, 0x2d, 0xf2, 0xad, 0xc1, 0x12, 0x2d, 0x82, 0xe2, 0x1c, 0xd8, 0xc4, 0xb3, 0x88, 0xab, 0xca,
	0xc9, 0x16, 0x5f, 0x6f, 0xbb, 0x68, 0x19, 0x40, 0x44, 0x2a, 0xde, 0x2c, 0x71, 0xad, 0x19, 0xf1,
	0x65, 0xdb, 0xd5, 0x3f, 0x4b, 0x70, 0x3d, 0xfb, 0x90, 0xff, 0xa0, 0xc1, 0xd1, 0x36, 0x8a, 0xe9,
	0x36, 0x5e, 0xc0, 0xdc, 0x44, 0xf6, 0x78, 0xab, 0x13, 0xe3, 0x98, 0x13, 0xbd, 0xc1, 0x78, 0x8f,
	0x65, 0x4e, 0xff, 0x2e, 0x41, 0xfd, 0x57, 0xc1, 0xf9, 0xbb, 0x56, 0x7a, 0xb0, 0x94, 0x17, 0xf2,
	0xe0, 0xdc, 0x95, 0x79, 0xc9, 0x8c, 0x0b, 0x7f, 0x8b, 0x34, 0x0f, 0xa0, 0xff, 0x90, 0x40, 0xbb,
	0x38, 0xa3, 0xff, 0x2a, 0x53, 0x14, 0x6a, 0xf9, 0x53, 0xc6, 0x33, 0x56, 0x59, 0xbb, 0x77, 0xa9,
	0x21, 0x13, 0xee, 0x17, 0x72, 0xa6, 0x6b, 0xe3, 0xd1, 0xf1, 0xa9, 0x26, 0x9d, 0x9c, 0x6a, 0xd2,
	0xb7, 0x53, 0x4d, 0xfa, 0x70, 0xa6, 0x15, 0x4e, 0xce, 0xb4, 0xc2, 0x97, 0x33, 0xad, 0xf0, 0xf2,
	0x4e, 0x87, 0x84, 0x07, 0x51, 0xdb, 0x70, 0xfc, 0xae, 0x99, 0xba, 0x01, 0x7b, 0xeb, 0xe6, 0xd1,
	0xf0, 0x5a, 0x0d, 0xfb, 0x14, 0xb3, 0x76, 0x99, 0x5f, 0x82, 0xeb, 0x3f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x88, 0xf6, 0x58, 0xa8, 0xee, 0x07, 0x00, 0x00,
}

func (m *BadgeUsedCu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeUsedCu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeUsedCu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsedCu != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UsedCu))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BadgeUsedCuKey) > 0 {
		i -= len(m.BadgeUsedCuKey)
		copy(dAtA[i:], m.BadgeUsedCuKey)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BadgeUsedCuKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderConsumerEpochCus) > 0 {
		for iNdEx := len(m.ProviderConsumerEpochCus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderConsumerEpochCus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ProviderEpochComplainedCus) > 0 {
		for iNdEx := len(m.ProviderEpochComplainedCus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderEpochComplainedCus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ProviderEpochCus) > 0 {
		for iNdEx := len(m.ProviderEpochCus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderEpochCus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.UniqueEpochSessions) > 0 {
		for iNdEx := len(m.UniqueEpochSessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UniqueEpochSessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.ProviderQosFS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.BadgesTS.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BadgeUsedCuList) > 0 {
		for iNdEx := len(m.BadgeUsedCuList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadgeUsedCuList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UniqueEpochSessionGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueEpochSessionGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueEpochSessionGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Project) > 0 {
		i -= len(m.Project)
		copy(dAtA[i:], m.Project)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Project)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderEpochCuGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderEpochCuGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderEpochCuGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProviderEpochCu.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderEpochComplainerCuGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderEpochComplainerCuGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderEpochComplainerCuGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProviderEpochComplainerCu.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderConsumerEpochCuGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderConsumerEpochCuGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderConsumerEpochCuGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProviderConsumerEpochCu.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Project) > 0 {
		i -= len(m.Project)
		copy(dAtA[i:], m.Project)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Project)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BadgeUsedCu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BadgeUsedCuKey)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.UsedCu != 0 {
		n += 1 + sovGenesis(uint64(m.UsedCu))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BadgeUsedCuList) > 0 {
		for _, e := range m.BadgeUsedCuList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.BadgesTS.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.ProviderQosFS.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.UniqueEpochSessions) > 0 {
		for _, e := range m.UniqueEpochSessions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProviderEpochCus) > 0 {
		for _, e := range m.ProviderEpochCus {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProviderEpochComplainedCus) > 0 {
		for _, e := range m.ProviderEpochComplainedCus {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProviderConsumerEpochCus) > 0 {
		for _, e := range m.ProviderConsumerEpochCus {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *UniqueEpochSessionGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovGenesis(uint64(m.Epoch))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovGenesis(uint64(m.SessionId))
	}
	return n
}

func (m *ProviderEpochCuGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovGenesis(uint64(m.Epoch))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.ProviderEpochCu.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ProviderEpochComplainerCuGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovGenesis(uint64(m.Epoch))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.ProviderEpochComplainerCu.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ProviderConsumerEpochCuGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovGenesis(uint64(m.Epoch))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.ProviderConsumerEpochCu.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BadgeUsedCu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeUsedCu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeUsedCu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUsedCuKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUsedCuKey = append(m.BadgeUsedCuKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BadgeUsedCuKey == nil {
				m.BadgeUsedCuKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCu", wireType)
			}
			m.UsedCu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedCu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUsedCuList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUsedCuList = append(m.BadgeUsedCuList, BadgeUsedCu{})
			if err := m.BadgeUsedCuList[len(m.BadgeUsedCuList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgesTS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadgesTS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderQosFS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderQosFS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueEpochSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueEpochSessions = append(m.UniqueEpochSessions, UniqueEpochSessionGenesis{})
			if err := m.UniqueEpochSessions[len(m.UniqueEpochSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderEpochCus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderEpochCus = append(m.ProviderEpochCus, ProviderEpochCuGenesis{})
			if err := m.ProviderEpochCus[len(m.ProviderEpochCus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderEpochComplainedCus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderEpochComplainedCus = append(m.ProviderEpochComplainedCus, ProviderEpochComplainerCuGenesis{})
			if err := m.ProviderEpochComplainedCus[len(m.ProviderEpochComplainedCus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderConsumerEpochCus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderConsumerEpochCus = append(m.ProviderConsumerEpochCus, ProviderConsumerEpochCuGenesis{})
			if err := m.ProviderConsumerEpochCus[len(m.ProviderConsumerEpochCus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniqueEpochSessionGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueEpochSessionGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueEpochSessionGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderEpochCuGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderEpochCuGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderEpochCuGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderEpochCu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderEpochCu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderEpochComplainerCuGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderEpochComplainerCuGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderEpochComplainerCuGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderEpochComplainerCu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderEpochComplainerCu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderConsumerEpochCuGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderConsumerEpochCuGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderConsumerEpochCuGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderConsumerEpochCu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderConsumerEpochCu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
