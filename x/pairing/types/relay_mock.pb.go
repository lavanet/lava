// Code generated by MockGen. DO NOT EDIT.
// Source: x/pairing/types/relay.pb.go

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockRelayerClient is a mock of RelayerClient interface.
type MockRelayerClient struct {
	ctrl     *gomock.Controller
	recorder *MockRelayerClientMockRecorder
}

// MockRelayerClientMockRecorder is the mock recorder for MockRelayerClient.
type MockRelayerClientMockRecorder struct {
	mock *MockRelayerClient
}

// NewMockRelayerClient creates a new mock instance.
func NewMockRelayerClient(ctrl *gomock.Controller) *MockRelayerClient {
	mock := &MockRelayerClient{ctrl: ctrl}
	mock.recorder = &MockRelayerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayerClient) EXPECT() *MockRelayerClientMockRecorder {
	return m.recorder
}

// Probe mocks base method.
func (m *MockRelayerClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Probe", varargs...)
	ret0, _ := ret[0].(*ProbeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockRelayerClientMockRecorder) Probe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockRelayerClient)(nil).Probe), varargs...)
}

// Relay mocks base method.
func (m *MockRelayerClient) Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Relay", varargs...)
	ret0, _ := ret[0].(*RelayReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relay indicates an expected call of Relay.
func (mr *MockRelayerClientMockRecorder) Relay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relay", reflect.TypeOf((*MockRelayerClient)(nil).Relay), varargs...)
}

// RelaySubscribe mocks base method.
func (m *MockRelayerClient) RelaySubscribe(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (Relayer_RelaySubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelaySubscribe", varargs...)
	ret0, _ := ret[0].(Relayer_RelaySubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelaySubscribe indicates an expected call of RelaySubscribe.
func (mr *MockRelayerClientMockRecorder) RelaySubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaySubscribe", reflect.TypeOf((*MockRelayerClient)(nil).RelaySubscribe), varargs...)
}

// MockRelayer_RelaySubscribeClient is a mock of Relayer_RelaySubscribeClient interface.
type MockRelayer_RelaySubscribeClient struct {
	ctrl     *gomock.Controller
	recorder *MockRelayer_RelaySubscribeClientMockRecorder
}

// MockRelayer_RelaySubscribeClientMockRecorder is the mock recorder for MockRelayer_RelaySubscribeClient.
type MockRelayer_RelaySubscribeClientMockRecorder struct {
	mock *MockRelayer_RelaySubscribeClient
}

// NewMockRelayer_RelaySubscribeClient creates a new mock instance.
func NewMockRelayer_RelaySubscribeClient(ctrl *gomock.Controller) *MockRelayer_RelaySubscribeClient {
	mock := &MockRelayer_RelaySubscribeClient{ctrl: ctrl}
	mock.recorder = &MockRelayer_RelaySubscribeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayer_RelaySubscribeClient) EXPECT() *MockRelayer_RelaySubscribeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockRelayer_RelaySubscribeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockRelayer_RelaySubscribeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockRelayer_RelaySubscribeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockRelayer_RelaySubscribeClient) Recv() (*RelayReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*RelayReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockRelayer_RelaySubscribeClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockRelayer_RelaySubscribeClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockRelayer_RelaySubscribeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockRelayer_RelaySubscribeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRelayer_RelaySubscribeClient)(nil).Trailer))
}

// MockRelayerServer is a mock of RelayerServer interface.
type MockRelayerServer struct {
	ctrl     *gomock.Controller
	recorder *MockRelayerServerMockRecorder
}

// MockRelayerServerMockRecorder is the mock recorder for MockRelayerServer.
type MockRelayerServerMockRecorder struct {
	mock *MockRelayerServer
}

// NewMockRelayerServer creates a new mock instance.
func NewMockRelayerServer(ctrl *gomock.Controller) *MockRelayerServer {
	mock := &MockRelayerServer{ctrl: ctrl}
	mock.recorder = &MockRelayerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayerServer) EXPECT() *MockRelayerServerMockRecorder {
	return m.recorder
}

// Probe mocks base method.
func (m *MockRelayerServer) Probe(arg0 context.Context, arg1 *ProbeRequest) (*ProbeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", arg0, arg1)
	ret0, _ := ret[0].(*ProbeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockRelayerServerMockRecorder) Probe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockRelayerServer)(nil).Probe), arg0, arg1)
}

// Relay mocks base method.
func (m *MockRelayerServer) Relay(arg0 context.Context, arg1 *RelayRequest) (*RelayReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relay", arg0, arg1)
	ret0, _ := ret[0].(*RelayReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relay indicates an expected call of Relay.
func (mr *MockRelayerServerMockRecorder) Relay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relay", reflect.TypeOf((*MockRelayerServer)(nil).Relay), arg0, arg1)
}

// RelaySubscribe mocks base method.
func (m *MockRelayerServer) RelaySubscribe(arg0 *RelayRequest, arg1 Relayer_RelaySubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelaySubscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelaySubscribe indicates an expected call of RelaySubscribe.
func (mr *MockRelayerServerMockRecorder) RelaySubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaySubscribe", reflect.TypeOf((*MockRelayerServer)(nil).RelaySubscribe), arg0, arg1)
}

// MockRelayer_RelaySubscribeServer is a mock of Relayer_RelaySubscribeServer interface.
type MockRelayer_RelaySubscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockRelayer_RelaySubscribeServerMockRecorder
}

// MockRelayer_RelaySubscribeServerMockRecorder is the mock recorder for MockRelayer_RelaySubscribeServer.
type MockRelayer_RelaySubscribeServerMockRecorder struct {
	mock *MockRelayer_RelaySubscribeServer
}

// NewMockRelayer_RelaySubscribeServer creates a new mock instance.
func NewMockRelayer_RelaySubscribeServer(ctrl *gomock.Controller) *MockRelayer_RelaySubscribeServer {
	mock := &MockRelayer_RelaySubscribeServer{ctrl: ctrl}
	mock.recorder = &MockRelayer_RelaySubscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayer_RelaySubscribeServer) EXPECT() *MockRelayer_RelaySubscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRelayer_RelaySubscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockRelayer_RelaySubscribeServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockRelayer_RelaySubscribeServer) Send(arg0 *RelayReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRelayer_RelaySubscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockRelayer_RelaySubscribeServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockRelayer_RelaySubscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRelayer_RelaySubscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRelayer_RelaySubscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRelayer_RelaySubscribeServer)(nil).SetTrailer), arg0)
}
