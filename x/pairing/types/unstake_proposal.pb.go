// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/pairing/unstake_proposal.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UnstakeProposal struct {
	Title              string                `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ProvidersInfo      []ProviderUnstakeInfo `protobuf:"bytes,3,rep,name=providers_info,json=providersInfo,proto3" json:"providers_info"`
	DelegatorsSlashing []DelegatorSlashing   `protobuf:"bytes,4,rep,name=DelegatorsSlashing,proto3" json:"DelegatorsSlashing"`
}

func (m *UnstakeProposal) Reset()         { *m = UnstakeProposal{} }
func (m *UnstakeProposal) String() string { return proto.CompactTextString(m) }
func (*UnstakeProposal) ProtoMessage()    {}
func (*UnstakeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d35cf592c1bb0d91, []int{0}
}
func (m *UnstakeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnstakeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnstakeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnstakeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnstakeProposal.Merge(m, src)
}
func (m *UnstakeProposal) XXX_Size() int {
	return m.Size()
}
func (m *UnstakeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UnstakeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UnstakeProposal proto.InternalMessageInfo

type ProviderUnstakeInfo struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	ChainId  string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ProviderUnstakeInfo) Reset()         { *m = ProviderUnstakeInfo{} }
func (m *ProviderUnstakeInfo) String() string { return proto.CompactTextString(m) }
func (*ProviderUnstakeInfo) ProtoMessage()    {}
func (*ProviderUnstakeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d35cf592c1bb0d91, []int{1}
}
func (m *ProviderUnstakeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderUnstakeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderUnstakeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderUnstakeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderUnstakeInfo.Merge(m, src)
}
func (m *ProviderUnstakeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProviderUnstakeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderUnstakeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderUnstakeInfo proto.InternalMessageInfo

func (m *ProviderUnstakeInfo) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderUnstakeInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type DelegatorSlashing struct {
	Delegator      string     `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	SlashingAmount types.Coin `protobuf:"bytes,2,opt,name=slashing_amount,json=slashingAmount,proto3" json:"slashing_amount"`
}

func (m *DelegatorSlashing) Reset()         { *m = DelegatorSlashing{} }
func (m *DelegatorSlashing) String() string { return proto.CompactTextString(m) }
func (*DelegatorSlashing) ProtoMessage()    {}
func (*DelegatorSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d35cf592c1bb0d91, []int{2}
}
func (m *DelegatorSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorSlashing.Merge(m, src)
}
func (m *DelegatorSlashing) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorSlashing proto.InternalMessageInfo

func (m *DelegatorSlashing) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegatorSlashing) GetSlashingAmount() types.Coin {
	if m != nil {
		return m.SlashingAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*UnstakeProposal)(nil), "lavanet.lava.pairing.UnstakeProposal")
	proto.RegisterType((*ProviderUnstakeInfo)(nil), "lavanet.lava.pairing.ProviderUnstakeInfo")
	proto.RegisterType((*DelegatorSlashing)(nil), "lavanet.lava.pairing.DelegatorSlashing")
}

func init() {
	proto.RegisterFile("lavanet/lava/pairing/unstake_proposal.proto", fileDescriptor_d35cf592c1bb0d91)
}

var fileDescriptor_d35cf592c1bb0d91 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x93, 0xf6, 0x80, 0xd6, 0x27, 0x5a, 0x61, 0x6e, 0xb8, 0x9e, 0x50, 0x7a, 0xba, 0x85,
	0x02, 0x92, 0xad, 0x16, 0x26, 0x36, 0x4a, 0x07, 0x2a, 0x31, 0x54, 0x45, 0x30, 0x20, 0xa1, 0x93,
	0x93, 0xf8, 0x7c, 0x16, 0x39, 0x3f, 0xcb, 0x76, 0x02, 0x88, 0x1d, 0x31, 0xf2, 0x11, 0xf8, 0x38,
	0x1d, 0x3b, 0x32, 0x21, 0x74, 0xf7, 0x45, 0x50, 0x1c, 0x27, 0x80, 0xc8, 0xe4, 0xbc, 0xf7, 0x7e,
	0xfe, 0xe7, 0xef, 0xf7, 0x1e, 0x7a, 0x54, 0xb0, 0x8a, 0x29, 0xee, 0x68, 0x7d, 0x52, 0xcd, 0xa4,
	0x91, 0x4a, 0xd0, 0x52, 0x59, 0xc7, 0xde, 0xf3, 0xb9, 0x36, 0xa0, 0xc1, 0xb2, 0x82, 0x68, 0x03,
	0x0e, 0xf0, 0x28, 0xc0, 0xa4, 0x3e, 0x49, 0x80, 0x27, 0x23, 0x01, 0x02, 0x3c, 0x40, 0xeb, 0xaf,
	0x86, 0x9d, 0x24, 0x02, 0x40, 0x14, 0x9c, 0xfa, 0x28, 0x2d, 0x17, 0xf4, 0x83, 0x61, 0x5a, 0x73,
	0x63, 0xdb, 0x7a, 0x06, 0x76, 0x05, 0x96, 0xa6, 0xcc, 0x72, 0x5a, 0x1d, 0xa7, 0xdc, 0xb1, 0x63,
	0x9a, 0x81, 0x54, 0x4d, 0x7d, 0xf6, 0x65, 0x0b, 0xed, 0xbf, 0x6e, 0x6c, 0x5c, 0x04, 0x17, 0x78,
	0x84, 0x6e, 0x38, 0xe9, 0x0a, 0x3e, 0x8e, 0xa7, 0xf1, 0xd1, 0xee, 0x65, 0x13, 0xe0, 0x29, 0x1a,
	0xe6, 0xdc, 0x66, 0x46, 0x6a, 0x27, 0x41, 0x8d, 0xb7, 0x7c, 0xed, 0xef, 0x14, 0x7e, 0x83, 0xf6,
	0xb4, 0x81, 0x4a, 0xe6, 0xdc, 0xd8, 0xb9, 0x54, 0x0b, 0x18, 0x6f, 0x4f, 0xb7, 0x8f, 0x86, 0x27,
	0x0f, 0x48, 0xdf, 0x83, 0xc8, 0x45, 0x60, 0xc3, 0xef, 0xcf, 0xd5, 0x02, 0x4e, 0x07, 0x57, 0x3f,
	0x0f, 0xa3, 0xcb, 0xdb, 0x9d, 0x4c, 0x9d, 0xc4, 0xef, 0x10, 0x3e, 0xe3, 0x05, 0x17, 0xcc, 0x81,
	0xb1, 0xaf, 0x0a, 0x66, 0x97, 0x52, 0x89, 0xf1, 0xc0, 0x6b, 0xdf, 0xef, 0xd7, 0xee, 0xf8, 0x16,
	0x0f, 0xca, 0x3d, 0x42, 0x4f, 0x07, 0x5f, 0xbf, 0x1f, 0x46, 0xb3, 0x97, 0xe8, 0x6e, 0x8f, 0x21,
	0x3c, 0x41, 0x3b, 0xad, 0x99, 0xd0, 0x8e, 0x2e, 0xc6, 0x07, 0x68, 0x27, 0x5b, 0x32, 0xa9, 0xe6,
	0x32, 0x0f, 0xed, 0xb8, 0xe5, 0xe3, 0xf3, 0x7c, 0xf6, 0x19, 0xdd, 0xf9, 0xcf, 0x02, 0xbe, 0x87,
	0x76, 0xf3, 0x36, 0x19, 0xc4, 0xfe, 0x24, 0xf0, 0x0b, 0xb4, 0x6f, 0x03, 0x39, 0x67, 0x2b, 0x28,
	0x95, 0xf3, 0xa2, 0xc3, 0x93, 0x03, 0xd2, 0xcc, 0x90, 0xd4, 0x33, 0x24, 0x61, 0x86, 0xe4, 0x39,
	0x48, 0x15, 0x1e, 0xb5, 0xd7, 0xde, 0x7b, 0xe6, 0xaf, 0x9d, 0x9e, 0x5d, 0xad, 0x93, 0xf8, 0x7a,
	0x9d, 0xc4, 0xbf, 0xd6, 0x49, 0xfc, 0x6d, 0x93, 0x44, 0xd7, 0x9b, 0x24, 0xfa, 0xb1, 0x49, 0xa2,
	0xb7, 0x0f, 0x85, 0x74, 0xcb, 0x32, 0x25, 0x19, 0xac, 0xe8, 0x3f, 0x1b, 0x59, 0x3d, 0xa1, 0x1f,
	0xbb, 0xb5, 0x74, 0x9f, 0x34, 0xb7, 0xe9, 0x4d, 0xbf, 0x20, 0x8f, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x93, 0x62, 0xfc, 0x8a, 0xbb, 0x02, 0x00, 0x00,
}

func (m *UnstakeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnstakeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnstakeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorsSlashing) > 0 {
		for iNdEx := len(m.DelegatorsSlashing) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorsSlashing[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUnstakeProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProvidersInfo) > 0 {
		for iNdEx := len(m.ProvidersInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProvidersInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUnstakeProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintUnstakeProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintUnstakeProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderUnstakeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderUnstakeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderUnstakeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintUnstakeProposal(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintUnstakeProposal(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SlashingAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUnstakeProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintUnstakeProposal(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUnstakeProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovUnstakeProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnstakeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUnstakeProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUnstakeProposal(uint64(l))
	}
	if len(m.ProvidersInfo) > 0 {
		for _, e := range m.ProvidersInfo {
			l = e.Size()
			n += 1 + l + sovUnstakeProposal(uint64(l))
		}
	}
	if len(m.DelegatorsSlashing) > 0 {
		for _, e := range m.DelegatorsSlashing {
			l = e.Size()
			n += 1 + l + sovUnstakeProposal(uint64(l))
		}
	}
	return n
}

func (m *ProviderUnstakeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovUnstakeProposal(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovUnstakeProposal(uint64(l))
	}
	return n
}

func (m *DelegatorSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovUnstakeProposal(uint64(l))
	}
	l = m.SlashingAmount.Size()
	n += 1 + l + sovUnstakeProposal(uint64(l))
	return n
}

func sovUnstakeProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUnstakeProposal(x uint64) (n int) {
	return sovUnstakeProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnstakeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnstakeProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnstakeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnstakeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvidersInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvidersInfo = append(m.ProvidersInfo, ProviderUnstakeInfo{})
			if err := m.ProvidersInfo[len(m.ProvidersInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorsSlashing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorsSlashing = append(m.DelegatorsSlashing, DelegatorSlashing{})
			if err := m.DelegatorsSlashing[len(m.DelegatorsSlashing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnstakeProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderUnstakeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnstakeProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderUnstakeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderUnstakeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnstakeProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnstakeProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnstakeProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnstakeProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUnstakeProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUnstakeProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnstakeProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUnstakeProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUnstakeProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUnstakeProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUnstakeProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUnstakeProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUnstakeProposal = fmt.Errorf("proto: unexpected end of group")
)
