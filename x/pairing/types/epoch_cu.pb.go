// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/pairing/epoch_cu.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UniqueEpochSession is used to detect double spend attacks
// It's kept in a epoch-prefixed store with a unique index: provider, project ID, chain ID and session ID
type UniqueEpochSession struct {
}

func (m *UniqueEpochSession) Reset()         { *m = UniqueEpochSession{} }
func (m *UniqueEpochSession) String() string { return proto.CompactTextString(m) }
func (*UniqueEpochSession) ProtoMessage()    {}
func (*UniqueEpochSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2abb0ec984ffb4c, []int{0}
}
func (m *UniqueEpochSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueEpochSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniqueEpochSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniqueEpochSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueEpochSession.Merge(m, src)
}
func (m *UniqueEpochSession) XXX_Size() int {
	return m.Size()
}
func (m *UniqueEpochSession) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueEpochSession.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueEpochSession proto.InternalMessageInfo

// ProviderEpochCu is used to track the CU of a specific provider in a specific epoch
// It's kept in a epoch-prefixed store with a unique index: provider address
type ProviderEpochCu struct {
	ServicedCu uint64 `protobuf:"varint,1,opt,name=serviced_cu,json=servicedCu,proto3" json:"serviced_cu,omitempty"`
}

func (m *ProviderEpochCu) Reset()         { *m = ProviderEpochCu{} }
func (m *ProviderEpochCu) String() string { return proto.CompactTextString(m) }
func (*ProviderEpochCu) ProtoMessage()    {}
func (*ProviderEpochCu) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2abb0ec984ffb4c, []int{1}
}
func (m *ProviderEpochCu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderEpochCu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderEpochCu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderEpochCu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderEpochCu.Merge(m, src)
}
func (m *ProviderEpochCu) XXX_Size() int {
	return m.Size()
}
func (m *ProviderEpochCu) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderEpochCu.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderEpochCu proto.InternalMessageInfo

func (m *ProviderEpochCu) GetServicedCu() uint64 {
	if m != nil {
		return m.ServicedCu
	}
	return 0
}

// ProviderEpochComplainerCu is used to track the CU complained of a specific provider in a specific epoch
// It's kept in a epoch-prefixed store with a unique index: provider address
type ProviderEpochComplainerCu struct {
	ComplainersCu uint64 `protobuf:"varint,1,opt,name=complainers_cu,json=complainersCu,proto3" json:"complainers_cu,omitempty"`
}

func (m *ProviderEpochComplainerCu) Reset()         { *m = ProviderEpochComplainerCu{} }
func (m *ProviderEpochComplainerCu) String() string { return proto.CompactTextString(m) }
func (*ProviderEpochComplainerCu) ProtoMessage()    {}
func (*ProviderEpochComplainerCu) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2abb0ec984ffb4c, []int{2}
}
func (m *ProviderEpochComplainerCu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderEpochComplainerCu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderEpochComplainerCu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderEpochComplainerCu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderEpochComplainerCu.Merge(m, src)
}
func (m *ProviderEpochComplainerCu) XXX_Size() int {
	return m.Size()
}
func (m *ProviderEpochComplainerCu) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderEpochComplainerCu.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderEpochComplainerCu proto.InternalMessageInfo

func (m *ProviderEpochComplainerCu) GetComplainersCu() uint64 {
	if m != nil {
		return m.ComplainersCu
	}
	return 0
}

// ProviderConsumerEpochCu is used to track the CU between a specific provider and
// consumer in a specific epoch
// It's kept in a epoch-prefixed store with a unique index: provider and project ID
type ProviderConsumerEpochCu struct {
	Cu uint64 `protobuf:"varint,1,opt,name=cu,proto3" json:"cu,omitempty"`
}

func (m *ProviderConsumerEpochCu) Reset()         { *m = ProviderConsumerEpochCu{} }
func (m *ProviderConsumerEpochCu) String() string { return proto.CompactTextString(m) }
func (*ProviderConsumerEpochCu) ProtoMessage()    {}
func (*ProviderConsumerEpochCu) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2abb0ec984ffb4c, []int{3}
}
func (m *ProviderConsumerEpochCu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderConsumerEpochCu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderConsumerEpochCu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderConsumerEpochCu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderConsumerEpochCu.Merge(m, src)
}
func (m *ProviderConsumerEpochCu) XXX_Size() int {
	return m.Size()
}
func (m *ProviderConsumerEpochCu) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderConsumerEpochCu.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderConsumerEpochCu proto.InternalMessageInfo

func (m *ProviderConsumerEpochCu) GetCu() uint64 {
	if m != nil {
		return m.Cu
	}
	return 0
}

func init() {
	proto.RegisterType((*UniqueEpochSession)(nil), "lavanet.lava.pairing.UniqueEpochSession")
	proto.RegisterType((*ProviderEpochCu)(nil), "lavanet.lava.pairing.ProviderEpochCu")
	proto.RegisterType((*ProviderEpochComplainerCu)(nil), "lavanet.lava.pairing.ProviderEpochComplainerCu")
	proto.RegisterType((*ProviderConsumerEpochCu)(nil), "lavanet.lava.pairing.ProviderConsumerEpochCu")
}

func init() {
	proto.RegisterFile("lavanet/lava/pairing/epoch_cu.proto", fileDescriptor_c2abb0ec984ffb4c)
}

var fileDescriptor_c2abb0ec984ffb4c = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0x49, 0x2c, 0x4b,
	0xcc, 0x4b, 0x2d, 0xd1, 0x07, 0xd1, 0xfa, 0x05, 0x89, 0x99, 0x45, 0x99, 0x79, 0xe9, 0xfa, 0xa9,
	0x05, 0xf9, 0xc9, 0x19, 0xf1, 0xc9, 0xa5, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x22, 0x50,
	0x45, 0x7a, 0x20, 0x5a, 0x0f, 0xaa, 0x48, 0x49, 0x84, 0x4b, 0x28, 0x34, 0x2f, 0xb3, 0xb0, 0x34,
	0xd5, 0x15, 0xa4, 0x3a, 0x38, 0xb5, 0xb8, 0x38, 0x33, 0x3f, 0x4f, 0xc9, 0x88, 0x8b, 0x3f, 0xa0,
	0x28, 0xbf, 0x2c, 0x33, 0x25, 0xb5, 0x08, 0x2c, 0xee, 0x5c, 0x2a, 0x24, 0xcf, 0xc5, 0x5d, 0x9c,
	0x5a, 0x54, 0x96, 0x99, 0x9c, 0x9a, 0x12, 0x9f, 0x5c, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12,
	0xc4, 0x05, 0x13, 0x72, 0x2e, 0x55, 0x72, 0xe2, 0x92, 0x44, 0xd5, 0x93, 0x9f, 0x5b, 0x90, 0x93,
	0x98, 0x99, 0x97, 0x5a, 0xe4, 0x5c, 0x2a, 0xa4, 0xca, 0xc5, 0x97, 0x0c, 0xe7, 0x17, 0x23, 0x0c,
	0xe0, 0x45, 0x12, 0x75, 0x2e, 0x55, 0xd2, 0xe4, 0x12, 0x87, 0x99, 0xe1, 0x9c, 0x9f, 0x57, 0x5c,
	0x9a, 0x8b, 0xb0, 0x9f, 0x8f, 0x8b, 0x09, 0xae, 0x8b, 0x29, 0xb9, 0xd4, 0xc9, 0xe5, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xb4, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4,
	0x92, 0xf3, 0x73, 0xf5, 0x51, 0x02, 0xa6, 0xcc, 0x58, 0xbf, 0x02, 0x1e, 0x3a, 0x25, 0x95, 0x05,
	0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0xb0, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x71, 0xca,
	0x79, 0x42, 0x01, 0x00, 0x00,
}

func (m *UniqueEpochSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueEpochSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueEpochSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ProviderEpochCu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderEpochCu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderEpochCu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServicedCu != 0 {
		i = encodeVarintEpochCu(dAtA, i, uint64(m.ServicedCu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderEpochComplainerCu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderEpochComplainerCu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderEpochComplainerCu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ComplainersCu != 0 {
		i = encodeVarintEpochCu(dAtA, i, uint64(m.ComplainersCu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderConsumerEpochCu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderConsumerEpochCu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderConsumerEpochCu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cu != 0 {
		i = encodeVarintEpochCu(dAtA, i, uint64(m.Cu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochCu(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochCu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UniqueEpochSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ProviderEpochCu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicedCu != 0 {
		n += 1 + sovEpochCu(uint64(m.ServicedCu))
	}
	return n
}

func (m *ProviderEpochComplainerCu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComplainersCu != 0 {
		n += 1 + sovEpochCu(uint64(m.ComplainersCu))
	}
	return n
}

func (m *ProviderConsumerEpochCu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cu != 0 {
		n += 1 + sovEpochCu(uint64(m.Cu))
	}
	return n
}

func sovEpochCu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochCu(x uint64) (n int) {
	return sovEpochCu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UniqueEpochSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochCu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueEpochSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueEpochSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEpochCu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochCu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderEpochCu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochCu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderEpochCu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderEpochCu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicedCu", wireType)
			}
			m.ServicedCu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochCu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicedCu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochCu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochCu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderEpochComplainerCu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochCu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderEpochComplainerCu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderEpochComplainerCu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplainersCu", wireType)
			}
			m.ComplainersCu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochCu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComplainersCu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochCu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochCu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderConsumerEpochCu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochCu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderConsumerEpochCu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderConsumerEpochCu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cu", wireType)
			}
			m.Cu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochCu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochCu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochCu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochCu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochCu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochCu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochCu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochCu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochCu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochCu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochCu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochCu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochCu = fmt.Errorf("proto: unexpected end of group")
)
