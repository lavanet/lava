// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/spec/spec.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Spec_ProvidersTypes int32

const (
	Spec_dynamic Spec_ProvidersTypes = 0
	Spec_static  Spec_ProvidersTypes = 1
)

var Spec_ProvidersTypes_name = map[int32]string{
	0: "dynamic",
	1: "static",
}

var Spec_ProvidersTypes_value = map[string]int32{
	"dynamic": 0,
	"static":  1,
}

func (x Spec_ProvidersTypes) String() string {
	return proto.EnumName(Spec_ProvidersTypes_name, int32(x))
}

func (Spec_ProvidersTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_789140b95c48dfce, []int{0, 0}
}

type Spec struct {
	Index                    string                                  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name                     string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enabled                  bool                                    `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DataReliabilitySupported bool                                    `protobuf:"varint,6,opt,name=data_reliability_supported,json=dataReliabilitySupported,proto3" json:"data_reliability_supported,omitempty"`
	FinalizationDistance     uint32                                  `protobuf:"varint,7,opt,name=finalization_distance,json=finalizationDistance,proto3" json:"finalization_distance,omitempty"`
	AverageBlockTime         int64                                   `protobuf:"varint,9,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	BlockLastUpdated         uint64                                  `protobuf:"varint,11,opt,name=block_last_updated,json=blockLastUpdated,proto3" json:"block_last_updated,omitempty"`
	ProvidersTypes           Spec_ProvidersTypes                     `protobuf:"varint,14,opt,name=providers_types,json=providersTypes,proto3,enum=lavanet.lava.spec.Spec_ProvidersTypes" json:"providers_types,omitempty"`
	Imports                  []string                                `protobuf:"bytes,15,rep,name=imports,proto3" json:"imports,omitempty"`
	ApiCollections           []*ApiCollection                        `protobuf:"bytes,16,rep,name=api_collections,json=apiCollections,proto3" json:"api_collections,omitempty"`
	Contributor              []string                                `protobuf:"bytes,17,rep,name=contributor,proto3" json:"contributor,omitempty"`
	ContributorPercentage    *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,18,opt,name=contributor_percentage,json=contributorPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"contributor_percentage,omitempty"`
}

func (m *Spec) Reset()         { *m = Spec{} }
func (m *Spec) String() string { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()    {}
func (*Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_789140b95c48dfce, []int{0}
}
func (m *Spec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Spec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spec.Merge(m, src)
}
func (m *Spec) XXX_Size() int {
	return m.Size()
}
func (m *Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_Spec.DiscardUnknown(m)
}

var xxx_messageInfo_Spec proto.InternalMessageInfo

func (m *Spec) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Spec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Spec) GetDataReliabilitySupported() bool {
	if m != nil {
		return m.DataReliabilitySupported
	}
	return false
}

func (m *Spec) GetFinalizationDistance() uint32 {
	if m != nil {
		return m.FinalizationDistance
	}
	return 0
}

func (m *Spec) GetAverageBlockTime() int64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *Spec) GetBlockLastUpdated() uint64 {
	if m != nil {
		return m.BlockLastUpdated
	}
	return 0
}

func (m *Spec) GetProvidersTypes() Spec_ProvidersTypes {
	if m != nil {
		return m.ProvidersTypes
	}
	return Spec_dynamic
}

func (m *Spec) GetImports() []string {
	if m != nil {
		return m.Imports
	}
	return nil
}

func (m *Spec) GetApiCollections() []*ApiCollection {
	if m != nil {
		return m.ApiCollections
	}
	return nil
}

func (m *Spec) GetContributor() []string {
	if m != nil {
		return m.Contributor
	}
	return nil
}

func init() {
	proto.RegisterEnum("lavanet.lava.spec.Spec_ProvidersTypes", Spec_ProvidersTypes_name, Spec_ProvidersTypes_value)
	proto.RegisterType((*Spec)(nil), "lavanet.lava.spec.Spec")
}

func init() { proto.RegisterFile("lavanet/lava/spec/spec.proto", fileDescriptor_789140b95c48dfce) }

var fileDescriptor_789140b95c48dfce = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0x9b, 0xb7, 0x5e, 0x97, 0xba, 0xef, 0x3a, 0xcf, 0x74, 0xc8, 0x9a, 0x50, 0x88, 0x76,
	0x18, 0x01, 0x41, 0xa2, 0x6d, 0xe2, 0xc6, 0x85, 0x31, 0x0e, 0x44, 0x48, 0x4c, 0xd9, 0xb8, 0x70,
	0x89, 0x1c, 0xc7, 0x14, 0x6b, 0x49, 0x6c, 0xc5, 0x6e, 0xb5, 0xf1, 0x29, 0xf8, 0x18, 0xdc, 0xf8,
	0x1a, 0x1c, 0x77, 0x44, 0x1c, 0x10, 0x6a, 0xbf, 0x08, 0x72, 0xda, 0x8e, 0x54, 0xe3, 0x12, 0xe7,
	0xff, 0xfc, 0x7f, 0x7a, 0xfc, 0xf8, 0x79, 0x6c, 0xf8, 0xa0, 0xa0, 0x53, 0x5a, 0x71, 0x13, 0xd9,
	0x35, 0xd2, 0x8a, 0xb3, 0xe6, 0x13, 0xaa, 0x5a, 0x1a, 0x89, 0x77, 0x96, 0x6e, 0x68, 0xd7, 0xd0,
	0x1a, 0x7b, 0xa3, 0xb1, 0x1c, 0xcb, 0xc6, 0x8d, 0xec, 0xdf, 0x02, 0xdc, 0x3b, 0xb8, 0x9b, 0x86,
	0x2a, 0x91, 0x32, 0x59, 0x14, 0x9c, 0x19, 0x21, 0xab, 0x25, 0xe7, 0x31, 0xa9, 0x4b, 0xa9, 0xa3,
	0x8c, 0x6a, 0x1e, 0x4d, 0x0f, 0x33, 0x6e, 0xe8, 0x61, 0xc4, 0xa4, 0x58, 0xfa, 0xfb, 0xdf, 0x36,
	0x20, 0x38, 0x57, 0x9c, 0xe1, 0x11, 0xdc, 0x10, 0x55, 0xce, 0xaf, 0x88, 0xe3, 0x3b, 0x41, 0x3f,
	0x59, 0x08, 0x8c, 0x21, 0xa8, 0x68, 0xc9, 0xc9, 0x7f, 0x4d, 0xb0, 0xf9, 0xc7, 0x04, 0x6e, 0xf2,
	0x8a, 0x66, 0x05, 0xcf, 0x09, 0xf0, 0x9d, 0xc0, 0x4d, 0x56, 0x12, 0xbf, 0x80, 0x7b, 0x39, 0x35,
	0x34, 0xad, 0x79, 0x21, 0x68, 0x26, 0x0a, 0x61, 0xae, 0x53, 0x3d, 0x51, 0x4a, 0xd6, 0x86, 0xe7,
	0xa4, 0xd7, 0xc0, 0xc4, 0x12, 0xc9, 0x5f, 0xe0, 0x7c, 0xe5, 0xe3, 0x63, 0xb8, 0xfb, 0x51, 0x54,
	0xb4, 0x10, 0x9f, 0xa9, 0x3d, 0x40, 0x9a, 0x0b, 0x6d, 0x68, 0xc5, 0x38, 0xd9, 0xf4, 0x9d, 0x60,
	0x2b, 0x19, 0xb5, 0xcd, 0xd3, 0xa5, 0x87, 0x9f, 0x42, 0x4c, 0xa7, 0xbc, 0xa6, 0x63, 0x9e, 0x66,
	0x85, 0x64, 0x97, 0xa9, 0x11, 0x25, 0x27, 0x7d, 0xdf, 0x09, 0xba, 0x09, 0x5a, 0x3a, 0x27, 0xd6,
	0xb8, 0x10, 0x65, 0x43, 0x2f, 0xa8, 0x82, 0x6a, 0x93, 0x4e, 0x54, 0x4e, 0x6d, 0x61, 0x03, 0xdf,
	0x09, 0x40, 0x82, 0x1a, 0xe7, 0x2d, 0xd5, 0xe6, 0xfd, 0x22, 0x8e, 0xdf, 0xc1, 0x6d, 0x55, 0xcb,
	0xa9, 0xc8, 0x79, 0xad, 0x53, 0x73, 0xad, 0xb8, 0x26, 0x43, 0xdf, 0x09, 0x86, 0x47, 0x07, 0xe1,
	0x9d, 0x31, 0x85, 0xb6, 0x89, 0xe1, 0xd9, 0x0a, 0xbf, 0xb0, 0x74, 0x32, 0x54, 0x6b, 0xda, 0x76,
	0x4e, 0x94, 0xf6, 0xb4, 0x9a, 0x6c, 0xfb, 0xdd, 0xa0, 0x9f, 0xac, 0x24, 0x7e, 0x03, 0xb7, 0xd7,
	0xc7, 0xa7, 0x09, 0xf2, 0xbb, 0xc1, 0xe0, 0xc8, 0xff, 0xc7, 0x56, 0x2f, 0x95, 0x78, 0x75, 0x0b,
	0x26, 0x43, 0xda, 0x96, 0x1a, 0xfb, 0x70, 0xc0, 0x64, 0x65, 0x6a, 0x91, 0x4d, 0x8c, 0xac, 0xc9,
	0x4e, 0xb3, 0x51, 0x3b, 0x84, 0x29, 0xbc, 0xdf, 0x92, 0xa9, 0xe2, 0x35, 0xe3, 0x95, 0xa1, 0x63,
	0x4e, 0xb0, 0x1d, 0xf3, 0xc9, 0x93, 0x9f, 0xbf, 0x1e, 0x1e, 0x8c, 0x85, 0xf9, 0x34, 0xc9, 0x42,
	0x26, 0xcb, 0x68, 0x79, 0x85, 0x16, 0xcb, 0x33, 0x9d, 0x5f, 0x46, 0x4d, 0x33, 0xc2, 0x53, 0xce,
	0x92, 0xdd, 0x56, 0xa6, 0xb3, 0xdb, 0x44, 0xfb, 0x8f, 0xe1, 0x70, 0xbd, 0x17, 0x78, 0x00, 0x37,
	0xf3, 0xeb, 0x8a, 0x96, 0x82, 0xa1, 0x0e, 0x86, 0xb0, 0xa7, 0x0d, 0x35, 0x82, 0x21, 0x27, 0x06,
	0x6e, 0x17, 0x81, 0x18, 0xb8, 0x1b, 0xa8, 0x17, 0x03, 0xd7, 0x45, 0xfd, 0x18, 0xb8, 0x10, 0x0d,
	0x62, 0xe0, 0xfe, 0x8f, 0xb6, 0x62, 0xe0, 0x6e, 0xa1, 0x61, 0x0c, 0xdc, 0x7b, 0x68, 0x14, 0x03,
	0x77, 0x84, 0x76, 0x4f, 0x5e, 0x7f, 0x9d, 0x79, 0xce, 0xf7, 0x99, 0xe7, 0xdc, 0xcc, 0x3c, 0xe7,
	0xf7, 0xcc, 0x73, 0xbe, 0xcc, 0xbd, 0xce, 0xcd, 0xdc, 0xeb, 0xfc, 0x98, 0x7b, 0x9d, 0x0f, 0x8f,
	0x5a, 0x75, 0xaf, 0x3d, 0x91, 0xe9, 0xf3, 0xe8, 0x6a, 0xf1, 0x4e, 0x9a, 0xe2, 0xb3, 0x5e, 0x73,
	0xff, 0x8f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x6f, 0x6d, 0x31, 0x90, 0x03, 0x00, 0x00,
}

func (this *Spec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Spec)
	if !ok {
		that2, ok := that.(Spec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.DataReliabilitySupported != that1.DataReliabilitySupported {
		return false
	}
	if this.FinalizationDistance != that1.FinalizationDistance {
		return false
	}
	if this.AverageBlockTime != that1.AverageBlockTime {
		return false
	}
	if this.BlockLastUpdated != that1.BlockLastUpdated {
		return false
	}
	if this.ProvidersTypes != that1.ProvidersTypes {
		return false
	}
	if len(this.Imports) != len(that1.Imports) {
		return false
	}
	for i := range this.Imports {
		if this.Imports[i] != that1.Imports[i] {
			return false
		}
	}
	if len(this.ApiCollections) != len(that1.ApiCollections) {
		return false
	}
	for i := range this.ApiCollections {
		if !this.ApiCollections[i].Equal(that1.ApiCollections[i]) {
			return false
		}
	}
	if len(this.Contributor) != len(that1.Contributor) {
		return false
	}
	for i := range this.Contributor {
		if this.Contributor[i] != that1.Contributor[i] {
			return false
		}
	}
	if that1.ContributorPercentage == nil {
		if this.ContributorPercentage != nil {
			return false
		}
	} else if !this.ContributorPercentage.Equal(*that1.ContributorPercentage) {
		return false
	}
	return true
}
func (m *Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Spec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContributorPercentage != nil {
		{
			size := m.ContributorPercentage.Size()
			i -= size
			if _, err := m.ContributorPercentage.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Contributor) > 0 {
		for iNdEx := len(m.Contributor) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contributor[iNdEx])
			copy(dAtA[i:], m.Contributor[iNdEx])
			i = encodeVarintSpec(dAtA, i, uint64(len(m.Contributor[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ApiCollections) > 0 {
		for iNdEx := len(m.ApiCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Imports) > 0 {
		for iNdEx := len(m.Imports) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Imports[iNdEx])
			copy(dAtA[i:], m.Imports[iNdEx])
			i = encodeVarintSpec(dAtA, i, uint64(len(m.Imports[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.ProvidersTypes != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.ProvidersTypes))
		i--
		dAtA[i] = 0x70
	}
	if m.BlockLastUpdated != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.BlockLastUpdated))
		i--
		dAtA[i] = 0x58
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x48
	}
	if m.FinalizationDistance != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.FinalizationDistance))
		i--
		dAtA[i] = 0x38
	}
	if m.DataReliabilitySupported {
		i--
		if m.DataReliabilitySupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Spec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.DataReliabilitySupported {
		n += 2
	}
	if m.FinalizationDistance != 0 {
		n += 1 + sovSpec(uint64(m.FinalizationDistance))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovSpec(uint64(m.AverageBlockTime))
	}
	if m.BlockLastUpdated != 0 {
		n += 1 + sovSpec(uint64(m.BlockLastUpdated))
	}
	if m.ProvidersTypes != 0 {
		n += 1 + sovSpec(uint64(m.ProvidersTypes))
	}
	if len(m.Imports) > 0 {
		for _, s := range m.Imports {
			l = len(s)
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if len(m.ApiCollections) > 0 {
		for _, e := range m.ApiCollections {
			l = e.Size()
			n += 2 + l + sovSpec(uint64(l))
		}
	}
	if len(m.Contributor) > 0 {
		for _, s := range m.Contributor {
			l = len(s)
			n += 2 + l + sovSpec(uint64(l))
		}
	}
	if m.ContributorPercentage != nil {
		l = m.ContributorPercentage.Size()
		n += 2 + l + sovSpec(uint64(l))
	}
	return n
}

func sovSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataReliabilitySupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataReliabilitySupported = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizationDistance", wireType)
			}
			m.FinalizationDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizationDistance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockLastUpdated", wireType)
			}
			m.BlockLastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockLastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvidersTypes", wireType)
			}
			m.ProvidersTypes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvidersTypes |= Spec_ProvidersTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imports = append(m.Imports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiCollections = append(m.ApiCollections, &ApiCollection{})
			if err := m.ApiCollections[len(m.ApiCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributor = append(m.Contributor, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributorPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.ContributorPercentage = &v
			if err := m.ContributorPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpec = fmt.Errorf("proto: unexpected end of group")
)
