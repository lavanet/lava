name: Publish Lava Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: "The desired tag for the release (e.g. v1.1.0)."
        required: true

permissions:
  contents: read

jobs:
  release:
    name: 'release'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
      with:
        large-packages: false
        docker-images: false
        swap-storage: false
        tool-cache: false

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.release_tag != '' && github.event.inputs.release_tag || github.ref_name }}    
        
    - name: Fetch all tags
      run: |
        git fetch --force --tags
        
    - name: Run GoReleaser
      id: releaser
      uses: docker://goreleaser/goreleaser-cross:v1.22
      with:
        args: release --clean --timeout 90m
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  release_docker:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [lavap, lavad]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: "lavanet/lava/${{ matrix.binary }}"
    steps:      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.release_tag != '' && github.event.inputs.release_tag || github.ref_name }}  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3      
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: cmd/${{ matrix.binary }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            GIT_VERSION="${{ steps.meta.outputs.version }}"
            GIT_COMMIT="${{ github.sha }}"
          push: true
      - name: Extract metadata (cosmovisor)
        if: ${{ matrix.binary == 'lavad' }}
        id: meta-cosmovisor
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cosmovisor
          tags: |
            type=raw,value=latest,enable=true
      - name: Build and push
        uses: docker/build-push-action@v5
        if: ${{ matrix.binary == 'lavad' }}
        with:
          tags: ${{ steps.meta-cosmovisor.outputs.tags }}
          labels: ${{ steps.meta-cosmovisor.outputs.labels }}
          file: cmd/${{ matrix.binary }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            GIT_VERSION="${{ steps.meta-cosmovisor.outputs.version }}"
            GIT_COMMIT="${{ github.sha }}"
          push: true
