syntax = "proto3";
package lavanet.lava.spec;

option go_package = "github.com/lavanet/lava/v3/x/spec/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";

message ApiCollection {
  bool enabled = 1;
  CollectionData collection_data =2 [(gogoproto.nullable) = false];
  repeated Api apis = 3;
  repeated Header headers = 4;
  repeated CollectionData inheritance_apis = 5; // by collectionKey
  repeated ParseDirective parse_directives = 6;
  repeated Extension extensions = 7;
  repeated Verification verifications = 8;
}

message Extension {
  string name = 1;
  reserved 2 ;
  Rule rule =3 ;
  uint64 cu_multiplier = 4;
}

message Rule {
  uint64 block= 1;
}

message Verification {
  string name = 1;
  ParseDirective parse_directive = 2;
  repeated ParseValue values= 3;
  reserved 4;
}

message ParseValue {
  string extension =1;
  string expected_value =2;
  uint64 latest_distance = 3;
  enum VerificationSeverity {
    Fail = 0;
    Warning = 1;
  }
  VerificationSeverity severity = 4;
}

message CollectionData {
  string api_interface = 1 [(gogoproto.moretags) = "mapstructure:\"api_interface\"", (gogoproto.jsontag) = "api_interface"];
  string internal_path = 2 [(gogoproto.moretags) = "mapstructure:\"internal_path\"", (gogoproto.jsontag) = "internal_path"];
  string type = 3 [(gogoproto.moretags) = "mapstructure:\"type\"", (gogoproto.jsontag) = "type"];
	string add_on = 4 [(gogoproto.moretags) = "mapstructure:\"add_on\"", (gogoproto.jsontag) = "add_on"];
}

message Header {
  string name = 1;
	
  enum HeaderType {
    pass_send = 0;
    pass_reply = 1;
    pass_both = 2;
    pass_ignore = 3; // allows it to pass around but is not signed
  }

  HeaderType kind = 2;
  FUNCTION_TAG function_tag = 3;
}

message Api {
  bool enabled = 1; 
  string name = 2; 
  uint64 compute_units = 3; 
  uint64 extra_compute_units = 4;
  SpecCategory category = 6 [(gogoproto.nullable) = false];
  BlockParser block_parsing = 7 [(gogoproto.nullable) = false];
  uint64 timeout_ms = 8;
  repeated GenericParser parsers = 9 [(gogoproto.nullable) = false];
}

message ParseDirective {
  FUNCTION_TAG function_tag = 1;
  string function_template = 2;
  BlockParser result_parsing = 3 [(gogoproto.nullable) = false];
  string api_name = 4;
}

message BlockParser {
  repeated string parser_arg = 1;
  PARSER_FUNC parser_func = 2;
  string default_value = 3; // default value when set allows parsing failures to assume the default value
  string encoding =4; // used to parse byte responses: base64,hex,bech32
}

message GenericParser {
  string parse_path = 1;
  string value = 2;
  PARSER_TYPE parse_type = 3;
  string rule = 4;
}

enum EXTENSION {
  NONE = 0;
  ARCHIVE =1;
}

enum FUNCTION_TAG {
  DISABLED = 0;
  GET_BLOCKNUM = 1;
  GET_BLOCK_BY_NUM = 2;
  SET_LATEST_IN_METADATA = 3;
  SET_LATEST_IN_BODY = 4;
  VERIFICATION = 5;
  GET_EARLIEST_BLOCK = 6;
  SUBSCRIBE = 7;
  UNSUBSCRIBE = 8;
  UNSUBSCRIBE_ALL = 9;
}

enum PARSER_TYPE {
  NO_PARSER = 0;
  BLOCK_LATEST = 1;
  BLOCK_EARLIEST = 2;
  RESULT = 3;
  EXTENSION_ARG = 4;
  IDENTIFIER = 5;
  DEFAULT_VALUE = 6;
  BLOCK_HASH = 7;
}

enum PARSER_FUNC{
  EMPTY = 0;
  PARSE_BY_ARG = 1; //means parameters are ordered and flat expected arguments are: [param index] (example: PARAMS: [<#BlockNum>,"banana"]) args: 0
  PARSE_CANONICAL = 2; //means parameters are ordered and one of them has named properties, expected arguments are: [param index to object,prop_name in object] (example: PARAMS: ["banana",{prop_name:<#BlockNum>}]) need to configure args: 1,"prop_name"
  PARSE_DICTIONARY = 3; //means parameters are named, expected arguments are [prop_name,separator] (example: PARAMS: {prop_name:<#BlockNum>,prop2:"banana"}) args: "prop_name"
  PARSE_DICTIONARY_OR_ORDERED = 4; //means parameters are named expected arguments are [prop_name,separator,parameter order if not found] for input of: block=15&address=abc OR ?abc,15 we will do args: block,=,1
  // reserved
  DEFAULT = 6; //means parameters are non related to block, and should fetch latest block args: "latest"
}

message SpecCategory{
  bool deterministic = 1;
  bool local = 2;
  bool subscription = 3;
  uint32 stateful = 4;
  bool hanging_api = 5;
}

