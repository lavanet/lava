syntax = "proto3";
package lavanet.lava.plans;

option go_package = "github.com/lavanet/lava/v4/x/plans/types";
option (gogoproto.equal_all) = true;
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "lavanet/lava/spec/api_collection.proto";

// protobuf expected in YAML format: used "moretags" to simplify parsing
message Policy {
    repeated ChainPolicy chain_policies = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "chain_policies"];
    int32 geolocation_profile = 2 [(gogoproto.jsontag) = "geolocation_profile"];
    uint64 total_cu_limit = 3 [(gogoproto.jsontag) = "total_cu_limit"];
    uint64 epoch_cu_limit = 4 [(gogoproto.jsontag) = "epoch_cu_limit"];
    uint64 max_providers_to_pair = 5 [(gogoproto.jsontag) = "max_providers_to_pair"];
    SELECTED_PROVIDERS_MODE selected_providers_mode = 6 [(gogoproto.jsontag) = "selected_providers_mode"];
    repeated string selected_providers = 7 [(gogoproto.jsontag) = "selected_providers"];
}

message ChainPolicy {
    string chain_id = 1 [(gogoproto.jsontag) = "chain_id"];
    repeated string apis = 2 [(gogoproto.jsontag) = "apis"];
    repeated ChainRequirement requirements = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "requirements"];
}

message ChainRequirement {
    lavanet.lava.spec.CollectionData collection  = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "collection"];
    repeated string extensions = 2 [(gogoproto.jsontag) = "extensions"];
    bool mixed = 3 [(gogoproto.jsontag) = "mixed"];
}

// the enum below determines the pairing algorithm's behaviour with the selected providers feature
enum SELECTED_PROVIDERS_MODE {
    ALLOWED = 0;    // no providers restrictions
    MIXED = 1;      // use the selected providers mixed with randomly chosen providers
    EXCLUSIVE = 2;  // use only the selected providers
    DISABLED = 3;   // selected providers feature is disabled
}
