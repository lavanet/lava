syntax = "proto3";
package lavanet.lava.rewards;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "lavanet/lava/rewards/base_pay.proto";
import "lavanet/lava/rewards/iprpc.proto";
import "lavanet/lava/rewards/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/lavanet/lava/v3/x/rewards/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/params";
  }

  // Pools queries all the pools' info
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/pools";
  }

  // BlockReward queries for the validators reward for proposing a block
  rpc BlockReward(QueryBlockRewardRequest) returns (QueryBlockRewardResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/block_reward";
  }

  // ShowIprpcData queries for the iprpc data
  rpc ShowIprpcData(QueryShowIprpcDataRequest) returns (QueryShowIprpcDataResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/show_iprpc_data";
  }

  // ProviderReward queries for the providers reward for their services
  rpc SpecTrackedInfo(QuerySpecTrackedInfoRequest) returns (QuerySpecTrackedInfoResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/SpecTrackedInfo/{chain_id}/{provider}";
  }

  // IprpcProviderRewardEstimation queries for a provider's current IPRPC reward (relative to its serviced CU)
  rpc IprpcProviderRewardEstimation(QueryIprpcProviderRewardEstimationRequest) returns (QueryIprpcProviderRewardEstimationResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/iprpc_provider_reward/{provider}";
  }

  // IprpcSpecReward queries for a spec's IPRPC reward
  rpc IprpcSpecReward(QueryIprpcSpecRewardRequest) returns (QueryIprpcSpecRewardResponse) {
    option (google.api.http).get = "/lavanet/lava/rewards/iprpc_spec_reward/{spec}";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryPoolsRequest is request type for the Query/Pools RPC method.
message QueryPoolsRequest {}

message PoolInfo {
  string name = 1; // pool name
  repeated cosmos.base.v1beta1.Coin balance = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ]; // pool balance (all types of tokens)
}

// QueryPoolsResponse is response type for the Query/Pools RPC method.
message QueryPoolsResponse {
  // details holds all the info of this module's pools.
  repeated PoolInfo pools = 1 [(gogoproto.nullable) = false];
  int64 time_to_refill = 2; // number of seconds until block pools refill
  int64 estimated_blocks_to_refill = 3; // estimated number of blocks until block pools are refilled
  int64 allocation_pool_months_left = 4; // amount of months until the allocation pools will run out of funds
}

// QueryBlockRewardRequest is request type for the Query/BlockReward RPC method.
message QueryBlockRewardRequest {}

// QueryBlockRewardResponse is response type for the Query/BlockReward RPC method.
message QueryBlockRewardResponse {
  cosmos.base.v1beta1.Coin reward = 1 [(gogoproto.nullable) = false];
}

// QueryShowIprpcDataRequest is request type for the Query/ShowIprpcData RPC method.
message QueryShowIprpcDataRequest {}

// QueryShowIprpcDataResponse is response type for the Query/ShowIprpcData RPC method.
message QueryShowIprpcDataResponse {
  cosmos.base.v1beta1.Coin min_cost = 1 [(gogoproto.nullable) = false];
  repeated string iprpc_subscriptions = 2;
}

// QueryProviderRewardRequest is request type for the Query/ProviderReward RPC method.
message QuerySpecTrackedInfoRequest {
  string chain_id = 1;
  string provider = 2;
}

// QueryProviderRewardResponse is response type for the Query/ProviderReward RPC method.
message QuerySpecTrackedInfoResponse {
  repeated BasePayWithIndex info = 1 [(gogoproto.nullable) = false];
}

// QueryIprpcProviderRewardEstimationRequest is request type for the Query/IprpcProviderRewardEstimation RPC method.
message QueryIprpcProviderRewardEstimationRequest {
  string provider = 1;
}

// QueryIprpcProviderRewardEstimationResponse is response type for the Query/IprpcProviderRewardEstimation RPC method.
message QueryIprpcProviderRewardEstimationResponse {
  repeated Specfund spec_funds = 1 [(gogoproto.nullable) = false];
}

// QueryIprpcSpecRewardRequest is request type for the Query/IprpcSpecReward RPC method.
message QueryIprpcSpecRewardRequest {
  string spec = 1;
}

// QueryIprpcSpecRewardResponse is response type for the Query/IprpcSpecReward RPC method.
message QueryIprpcSpecRewardResponse {
  repeated IprpcReward iprpc_rewards = 1 [(gogoproto.nullable) = false];
  uint64 current_month_id = 2;
}

// this line is used by starport scaffolding # 3
