syntax = "proto3";
package lavanet.lava.subscription;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "lavanet/lava/subscription/cu_tracker.proto";
import "lavanet/lava/subscription/params.proto";
// this line is used by starport scaffolding # 1
import "lavanet/lava/subscription/subscription.proto";
import "amino/amino.proto";

option go_package = "github.com/lavanet/lava/v2/x/subscription/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/params";
  }
  // Queries a list of Current items.
  rpc Current(QueryCurrentRequest) returns (QueryCurrentResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/current/{consumer}";
  }

  // Queries a list of ListProjects items.
  rpc ListProjects(QueryListProjectsRequest) returns (QueryListProjectsResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/list_projects/{subscription}";
  }

  // Queries a list of List items.
  rpc List(QueryListRequest) returns (QueryListResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/list";
  }

  // Queries the subscription with the closest month expiry
  rpc NextToMonthExpiry(QueryNextToMonthExpiryRequest) returns (QueryNextToMonthExpiryResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/next_to_month_expiry";
  }

  // Queries a list of Current items.
  rpc TrackedUsage(QuerySubscriptionTrackedUsageRequest) returns (QuerySubscriptionTrackedUsageResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/tracked_usage/{subscription}";
  }

// Queries a rewards estimation.
rpc EstimatedRewards(QueryEstimatedRewardsRequest) returns (QueryEstimatedRewardsResponse) {
  option (google.api.http).get = "/lavanet/lava/subscription/estimated_rewards/{provider}/{chain_id}/{amount_delegator}";
}

rpc EstimatedValidatorRewards(QueryEstimatedValidatorRewardsRequest) returns (QueryEstimatedValidatorRewardsResponse) {
  option (google.api.http).get = "/lavanet/lava/subscription/estimated_validator_rewards/{validator}/{amount_delegator}";
}

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryCurrentRequest {
  string consumer = 1;
}

message QueryCurrentResponse {
  Subscription sub = 1 [(gogoproto.nullable) = true];
}

message QueryListProjectsRequest {
  string subscription = 1;
}

message QueryListProjectsResponse {
  repeated string projects = 1;
}

message QueryListRequest {}

message QueryListResponse {
  repeated ListInfoStruct subs_info = 1 [(gogoproto.nullable) = false];
}

message ListInfoStruct {
  string consumer = 1; // beneficiary consumer
  string plan = 2; // plan assosiated with the subscription
  uint64 duration_bought = 3; // total duration in months (purchase/renewal)
  uint64 duration_left = 4; // remaining duration in months
  uint64 month_expiry = 5; // upcoming expiry (of current month) in unix time
  uint64 month_cu_total = 6; // total CU allowance per month
  uint64 month_cu_left = 7; // remaining CU allowance this month
  string cluster = 8;
  uint64 duration_total = 9;
  reserved 10;
  string auto_renewal_next_plan = 11;
  FutureSubscription future_subscription = 12;
  cosmos.base.v1beta1.Coin credit = 13;
}

message QueryNextToMonthExpiryRequest {}

message TimerExpiryInfo {
  string consumer = 1;
  uint64 month_expiry = 2; // upcoming expiry (of current month) in unix time
}

message QueryNextToMonthExpiryResponse {
  repeated TimerExpiryInfo subscriptions = 1 [(gogoproto.nullable) = false];
}

message QuerySubscriptionTrackedUsageRequest {
  string subscription = 1;
}

message QuerySubscriptionTrackedUsageResponse {
  Subscription subscription = 1 [(gogoproto.nullable) = true];
  repeated TrackedCuInfo usage = 2;
  uint64 total_usage = 3;
}

message QueryEstimatedRewardsRequest {
  string provider = 1;
  string chain_id = 2;
  string amount_delegator = 3; 
}

message EstimatedRewardInfo {
  string source =1;
  repeated cosmos.base.v1beta1.DecCoin amount = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}

message QueryEstimatedRewardsResponse {
  repeated EstimatedRewardInfo info = 1 [(gogoproto.nullable) = true];
  repeated cosmos.base.v1beta1.DecCoin total = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}

message QueryEstimatedValidatorRewardsRequest {
  string validator = 1;
  string amount_delegator = 2; 
}

message QueryEstimatedValidatorRewardsResponse {
  repeated EstimatedRewardInfo info = 1 [(gogoproto.nullable) = true];
  repeated cosmos.base.v1beta1.DecCoin total = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}
// this line is used by starport scaffolding # 3
