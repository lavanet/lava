syntax = "proto3";
package lavanet.lava.pairing;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lavanet/lava/pairing/params.proto";
import "lavanet/lava/spec/spec.proto";


// this line is used by starport scaffolding # 1
import "lavanet/lava/plans/policy.proto";
import "lavanet/lava/epochstorage/stake_entry.proto";
import "lavanet/lava/subscription/subscription.proto";
import "lavanet/lava/projects/project.proto";
import "lavanet/lava/downtime/v1/downtime.proto";

option go_package = "github.com/lavanet/lava/v3/x/pairing/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/pairing/params";
  }
  // Queries a list of Providers items.
	rpc Providers(QueryProvidersRequest) returns (QueryProvidersResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/providers/{chainID}";
	}

  // Queries a Provider item.
  	rpc Provider(QueryProviderRequest) returns (QueryProviderResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/provider/{address}/{chainID}";
	}

// Queries a list of GetPairing items.
	rpc GetPairing(QueryGetPairingRequest) returns (QueryGetPairingResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/get_pairing/{chainID}/{client}";
	}

// Queries a list of VerifyPairing items.
	rpc VerifyPairing(QueryVerifyPairingRequest) returns (QueryVerifyPairingResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/verify_pairing/{chainID}/{client}/{provider}/{block}";
	}

// Queries a list of ProviderPairingChance items.
	rpc ProviderPairingChance(QueryProviderPairingChanceRequest) returns (QueryProviderPairingChanceResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/provider_pairing_chance/{provider}/{chainID}/{geolocation}/{cluster}";
	}

// Queries a UserEntry items.
	rpc UserEntry(QueryUserEntryRequest) returns (QueryUserEntryResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/user_entry/{address}/{chainID}";
	}

// Queries a list of StaticProvidersList items.
	rpc StaticProvidersList(QueryStaticProvidersListRequest) returns (QueryStaticProvidersListResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/static_providers_list/{chainID}";
	}

// Queries a list of EffectivePolicy items.
	rpc EffectivePolicy(QueryEffectivePolicyRequest) returns (QueryEffectivePolicyResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/effective_policy/{consumer}/{specID}";
	}

// Queries the expected monthly payout of a specific provider
	rpc ProviderMonthlyPayout(QueryProviderMonthlyPayoutRequest) returns (QueryProviderMonthlyPayoutResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/provider_monthly_payout/{provider}";
	}

// Queries the expected monthly payout of a specific subscription
	rpc SubscriptionMonthlyPayout(QuerySubscriptionMonthlyPayoutRequest) returns (QuerySubscriptionMonthlyPayoutResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/subscription_monthly_payout/{consumer}";
	}

// Queries a list of SdkPairing items.
	rpc SdkPairing (QueryGetPairingRequest) returns (QuerySdkPairingResponse) {
		option (google.api.http).get = "/lavanet/lava/pairing/sdk_pairing";
	}

// Queries a for the aggregated CU of all ProviderEpochCu objects all the providers.
rpc ProvidersEpochCu(QueryProvidersEpochCuRequest) returns (QueryProvidersEpochCuResponse) {
	option (google.api.http).get = "/lavanet/lava/pairing/providers_epoch_cu";
}

	// this line is used by starport scaffolding # 2

}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryProvidersRequest {
  string chainID    = 1;
  bool   showFrozen = 2;
}

message QueryProvidersResponse {
  repeated lavanet.lava.epochstorage.StakeEntry stakeEntry = 1 [(gogoproto.nullable) = false];
  reserved 2;  
}

message QueryProviderRequest {
	string address = 1;
	string chainID = 2;
}
  
message QueryProviderResponse {
	repeated lavanet.lava.epochstorage.StakeEntry stakeEntries = 1 [(gogoproto.nullable) = false];
}

message QueryGetPairingRequest {
  string chainID = 1;
  string client  = 2;
}

message QueryGetPairingResponse {
	repeated lavanet.lava.epochstorage.StakeEntry providers = 1 [(gogoproto.nullable) = false];
	uint64 current_epoch = 2;
	uint64 time_left_to_next_pairing = 3;
	uint64 spec_last_updated_block = 4;
	uint64 block_of_next_pairing = 5;
}

message QueryVerifyPairingRequest {
  string chainID = 1;
  string client = 2;
  string provider = 3;
  uint64 block = 4;
}

message QueryVerifyPairingResponse {
  reserved 2;
  bool valid = 1;
  uint64 paired_providers = 3;
  uint64 cu_per_epoch = 4;
  string project_id = 5;
}

message QueryProviderPairingChanceRequest {
  string provider = 1;
  string chainID = 2;
  int32 geolocation = 3;
  string cluster = 4;
}
  
message QueryProviderPairingChanceResponse {
  string chance = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

message QueryUserEntryRequest {
  string address = 1;
  string chainID = 2;
  uint64 block   = 3;
}

message QueryUserEntryResponse {
  lavanet.lava.epochstorage.StakeEntry consumer = 1 [(gogoproto.nullable) = false];
  uint64                               maxCU    = 2;
}

message QueryStaticProvidersListRequest {
  string chainID = 1;
}

message QueryStaticProvidersListResponse {
	repeated lavanet.lava.epochstorage.StakeEntry providers = 1 [(gogoproto.nullable) = false];
}


message QueryEffectivePolicyRequest {
  string consumer = 1;
  string specID = 2;
}

message QueryEffectivePolicyResponse {
	lavanet.lava.plans.Policy policy = 1;
	lavanet.lava.plans.Policy pending_policy = 2;
}

// this line is used by starport scaffolding # 3

message QuerySdkPairingResponse {
  QueryGetPairingResponse pairing = 1;
  uint64 max_cu = 2;
  lavanet.lava.spec.Spec spec = 3;
  lavanet.lava.downtime.v1.Params downtime_params = 4;
}

message QueryProviderMonthlyPayoutRequest {
	string provider = 1;
  }
  
message SubscriptionPayout {
	string subscription = 1;
	string chain_id = 2;
	uint64 amount = 3;
}

message QueryProviderMonthlyPayoutResponse {
	uint64 total = 1;
	repeated SubscriptionPayout details = 2;
}

message ProviderPayout {
	string provider = 1;
	uint64 amount = 2;
}

message ChainIDPayout {
	string chain_id = 1;
	repeated ProviderPayout payouts = 2;
}

message QuerySubscriptionMonthlyPayoutRequest {
	string consumer = 1;
}
  
message QuerySubscriptionMonthlyPayoutResponse {
	uint64 total = 1;
	repeated ChainIDPayout details = 2;
}

message QueryProvidersEpochCuRequest {
}

message QueryProvidersEpochCuResponse {
	repeated ProviderCuInfo info = 1 [(gogoproto.nullable) = false];
}

message ProviderCuInfo {
	string provider = 1;
	uint64 cu = 2;
}